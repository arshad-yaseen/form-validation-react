{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = __importDefault(require(\"react\"));\nvar countryCodeRegexMap = {\n  US: /^(\\+?1)?[2-9]\\d{9}$/,\n  CA: /^(\\+?1)?[2-9]\\d{9}$/,\n  MX: /^(\\+?52)?(1)?\\d{10}$/,\n  GB: /^(\\+?44|0)7\\d{9}$/,\n  FR: /^(\\+?33|0)[67]\\d{8}$/,\n  DE: /^(\\+49|0)[1-9]\\d{10}$/,\n  JP: /^(\\+?81|0)\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{4}$/,\n  AU: /^(\\+?61|0)[45789]\\d{8}$/,\n  NZ: /^(\\+?64|0)[28]\\d{7,9}$/,\n  IN: /^(\\+?91|0)?[6789]\\d{9}$/,\n  CN: /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  HK: /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\n  SG: /^(\\+65)?[89]\\d{7}$/,\n  TW: /^(\\+?886\\-?|0)?9\\d{8}$/,\n  KR: /^(\\+?82|0)?1[0-9]{1,2}-?[0-9]{3,4}-?[0-9]{4}$/,\n  TH: /^(\\+66|66|0)\\d{8}$/,\n  PH: /^(\\+?63|0)?[89]\\d{9}$/,\n  VN: /^(\\+?84|0)?[1-9]\\d{8}$/,\n  MY: /^(\\+?6?01){1}(([145]{1}(-|\\s)?\\d{7,8})|([236789]{1}(\\s|-)?\\d{7}))$/,\n  BE: /^(\\+?32|0)4?\\d{8}$/,\n  NL: /^(\\+?31|0)6?\\d{8}$/,\n  IT: /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  ES: /^(\\+?34)?[-. ]?6\\d{8}$/,\n  PT: /^(\\+351)?9[1236]\\d{7}$/,\n  AT: /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  CH: /^(\\+41|0)([1-9])\\d{1,12}$/,\n  SE: /^(\\+?46|0)7\\d{8}$/,\n  NO: /^(\\+?47)?[49]\\d{7}$/,\n  DK: /^(\\+?45)?(\\d{8})$/,\n  FI: /^(\\+?358|0)\\s?(4(0|1|2|4|5)|50|4(6|7)|[5-7]|9\\d)\\s?\\d{6,7}$/,\n  BR: /^(\\+?55|0)?([1-9]{2})?([6-9]{1})(\\d{8})$/,\n  AR: /^(\\+?54|0)?([1-9])?([1-9])(\\d{7,8})$/,\n  CO: /^(\\+?57|0)?([1-8]{1})?([2-4]{1})(\\d{7})$/,\n  PE: /^(\\+?51|0)?([1-9]{2})?([1-9]{1})(\\d{7})$/,\n  CL: /^(\\+?56|0)?([2-9]{1})?([2-9])(\\d{6,7})$/,\n  VE: /^(\\+?58|0)?([4]{1})(1|2|4|6)(\\d{7})$/,\n  CR: /^(\\+?506)?([2-8]{1})(\\d{7})$/,\n  PA: /^(\\+?507)?([2-8]{1})(\\d{7})$/,\n  DO: /^(\\+?1|0)?([8]{1})(0|1)(\\d{7})$/,\n  GT: /^(\\+?502)?([23]{1})(\\d{7})$/,\n  EC: /^(\\+?593|0)([679]{1})(\\d{7})$/,\n  UY: /^(\\+?598|0)([4]{1}[2-9]{1}|[5-9]{1})(\\d{6})$/,\n  PY: /^(\\+?595|0)([9]{1})([1-9]{1})(\\d{6})$/,\n  BO: /^(\\+?591)?([267]{1})(\\d{7})$/,\n  HN: /^(\\+?504)?([239]{1})(\\d{7})$/,\n  NI: /^(\\+?505)?([5689]{1})(\\d{7})$/,\n  SV: /^(\\+?503)?([67]{1})(\\d{7})$/,\n  PR: /^(\\+?1)?([0]{1}[78]{1}|[2367]{1})(\\d{7})$/,\n  JM: /^(\\+?1)?([8]{1}[79]{1}|[45]{1}[67]{1})(\\d{7})$/,\n  BB: /^(\\+?1)?([246]{1})(\\d{7})$/,\n  KY: /^(\\+?1)?([345]{1}([01]{1}|[69]{1})|[24]{1}([26]{1}|[46]{1})|[78]{1}([4]{1}|[5]{1}|[7]{1}|[9]{1}))(\\d{6})$/,\n  VG: /^(\\+?1)?([284]{1})(\\d{7})$/,\n  TT: /^(\\+?1)?([868]{1})(\\d{7})$/,\n  DM: /^(\\+?1)?([767]{1})(\\d{7})$/,\n  GD: /^(\\+?1)?([473]{1})(\\d{7})$/,\n  GH: /^(\\+?233|0)?([23]0|[57][0567]|6[679]|8[124567])(\\d{7})$/,\n  KE: /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/,\n  NG: /^(\\+?234|0)?[789]\\d{9}$/,\n  UG: /^(\\+?256|0)?([39]0|[47][057]|[568][056]|[7-9][089])(\\d{7})$/,\n  RW: /^(\\+?250|0)?[7]\\d{8}$/,\n  CM: /^(\\+?237|0)?(6[57]|2[2368]|3[89]|4[6-8]|[78]0|\\d{2})(\\d{6,7})$/,\n  SN: /^(\\+?221|0)?[76][05](\\d{7}|\\d{8})$/,\n  TZ: /^(\\+?255|0)?[67]\\d{8}$/,\n  CI: /^(\\+?225|0)?[017]\\d{7}$/,\n  MG: /^(\\+?261|0)?[2368]\\d{7}$/,\n  ZM: /^(\\+?26[01]|0)?[567]\\d{8}$/,\n  ZW: /^(\\+?263|0)?[17]\\d{8}$/,\n  MW: /^(\\+?265|0)?[11768]\\d{7}$/,\n  LS: /^(\\+?266|0)?[5-8]\\d{7}$/,\n  SZ: /^(\\+?268|0)?[7]\\d{7}$/,\n  KM: /^(\\+?269|0)?[269]\\d{7}$/,\n  DJ: /^(\\+?253|0)?[77-9](\\d{6})$/,\n  RE: /^(\\+?262|0)?[269]\\d{8}$/,\n  YT: /^(\\+?262|0)?[639]\\d{8}$/,\n  WF: /^(\\+?681|0)?\\d{6}$/,\n  NU: /^(\\+?683|0)?\\d{4}$/,\n  TK: /^(\\+?690|0)?\\d{4}$/,\n  FM: /^(\\+?691|0)?[1-9]\\d{3}$/,\n  MH: /^(\\+?692|0)?\\d{7}$/,\n  SA: /^(\\+?966|0)?5[0-9]{8}$/,\n  RU: /^(\\+?7|8)?9\\d{9}$/\n};\nvar ValidateForm = /** @class */function (_super) {\n  __extends(ValidateForm, _super);\n  function ValidateForm() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ValidateForm.prototype.componentDidMount = function () {\n    this.init();\n  };\n  ValidateForm.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.rules !== prevProps.rules) {\n      this.init();\n    }\n  };\n  ValidateForm.prototype.init = function () {\n    var _a = this.props,\n      rules = _a.rules,\n      onSubmit = _a.onSubmit;\n    var errorElement = this.props.errorElement;\n    var allowedKeys = [\"validateRequired\", \"ValidateMinMax\", \"ValidateEmail\", \"ValidatePattern\", \"ValidatePhone\", \"ValidateNumber\", \"ValidateInteger\", \"ValidateFloat\"];\n    var wrapper = document.getElementById(\"_validation_wrapper\");\n    var form = wrapper === null || wrapper === void 0 ? void 0 : wrapper.children[0];\n    var submit_button = form.querySelector('button[type=\"submit\"]') || form.querySelector('input[type=\"submit\"]');\n    var errorText = document.querySelector(errorElement);\n    var errorMessage = String;\n    form.querySelectorAll(\"input\").forEach(function (input) {\n      if (input.style.transition === \"\") {\n        input.style.transition = \"0.2s ease-in-out\";\n      }\n    });\n    if (submit_button) {\n      form.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        if (errorText.innerHTML === \"\") {\n          if (onSubmit) {\n            onSubmit(e);\n          } else {\n            form.submit();\n          }\n        }\n      });\n    }\n    var setErrorText = function (message) {\n      if (errorText) {\n        errorText.innerText = message;\n      }\n    };\n    var runValidateRequired = function () {\n      // Check If All Required Feilds Filled\n      form.addEventListener(\"input\", function (event) {\n        var input = event.target;\n        input.style.borderColor = \"\";\n      });\n      var submit_button = (form === null || form === void 0 ? void 0 : form.querySelector('button[type=\"submit\"]')) || (form === null || form === void 0 ? void 0 : form.querySelector('input[type=\"submit\"]'));\n      submit_button === null || submit_button === void 0 ? void 0 : submit_button.addEventListener(\"click\", function (event) {\n        var _a, _b, _c, _d;\n        event.preventDefault();\n        var requiredInputs = [];\n        if ((_a = rules.validateRequired) === null || _a === void 0 ? void 0 : _a.applyOnly) {\n          (_b = rules.validateRequired) === null || _b === void 0 ? void 0 : _b.applyOnly.forEach(function (inputName) {\n            requiredInputs.push(form === null || form === void 0 ? void 0 : form.querySelector(\"[name=\\\"\".concat(inputName, \"\\\"]\")));\n          });\n        } else {\n          form === null || form === void 0 ? void 0 : form.querySelectorAll(\"input[required]\").forEach(function (input) {\n            requiredInputs.push(input);\n          });\n        }\n        var missingInputs = [];\n        requiredInputs === null || requiredInputs === void 0 ? void 0 : requiredInputs.forEach(function (input) {\n          if (!input.value) {\n            missingInputs.push(input);\n          }\n        });\n        if (missingInputs.length > 0) {\n          missingInputs.forEach(function (input, index) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if ((_a = rules.validateRequired) === null || _a === void 0 ? void 0 : _a.notvalidated) {\n              (_b = rules.validateRequired) === null || _b === void 0 ? void 0 : _b.notvalidated(missingInputs);\n            }\n            if (index === 0) {\n              input.focus();\n            }\n            if (((_c = rules.validateRequired) === null || _c === void 0 ? void 0 : _c.action) === \"input_red_border\") {\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            } else if (((_d = rules.validateRequired) === null || _d === void 0 ? void 0 : _d.action) === \"show_error_message\") {\n              if (rules.validateRequired.message) {\n                setErrorText(rules.validateRequired.message);\n              }\n            } else if (((_e = rules.validateRequired) === null || _e === void 0 ? void 0 : _e.action) === \"both\") {\n              if ((_f = rules.validateRequired) === null || _f === void 0 ? void 0 : _f.message) {\n                setErrorText((_g = rules.validateRequired) === null || _g === void 0 ? void 0 : _g.message);\n              }\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            }\n          });\n        } else {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if ((_c = rules.validateRequired) === null || _c === void 0 ? void 0 : _c.onsuccess) {\n            (_d = rules.validateRequired) === null || _d === void 0 ? void 0 : _d.onsuccess();\n          }\n        }\n      });\n    };\n    var runValidateMinMax = function () {\n      var _a, _b;\n      var inputs = form.querySelectorAll(\"input[min][max]\");\n      if (((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.when) === \"typing\") {\n        inputs.forEach(function (input) {\n          input.addEventListener(\"input\", function (event) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\n            var input = event.target;\n            var min = input.min;\n            var max = input.max;\n            var value = input.value;\n            var type = input.type;\n            var inputMinMessage = input.getAttribute(\"data-min-message\");\n            var inputMaxMessage = input.getAttribute(\"data-max-message\");\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if ((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.exceedsMin) {\n                    (_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_c = rules.ValidateMinMax) === null || _c === void 0 ? void 0 : _c.message) {\n                      setErrorText((_d = rules.ValidateMinMax) === null || _d === void 0 ? void 0 : _d.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if ((_e = rules.ValidateMinMax) === null || _e === void 0 ? void 0 : _e.exceedsMax) {\n                    (_f = rules.ValidateMinMax) === null || _f === void 0 ? void 0 : _f.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_g = rules.ValidateMinMax) === null || _g === void 0 ? void 0 : _g.message) {\n                      setErrorText((_h = rules.ValidateMinMax) === null || _h === void 0 ? void 0 : _h.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_j = rules.ValidateMinMax) === null || _j === void 0 ? void 0 : _j.onsuccess) {\n                    (_k = rules.ValidateMinMax) === null || _k === void 0 ? void 0 : _k.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if ((_l = rules.ValidateMinMax) === null || _l === void 0 ? void 0 : _l.exceedsMin) {\n                    (_m = rules.ValidateMinMax) === null || _m === void 0 ? void 0 : _m.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_o = rules.ValidateMinMax) === null || _o === void 0 ? void 0 : _o.message) {\n                      setErrorText((_p = rules.ValidateMinMax) === null || _p === void 0 ? void 0 : _p.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if ((_q = rules.ValidateMinMax) === null || _q === void 0 ? void 0 : _q.exceedsMax) {\n                    (_r = rules.ValidateMinMax) === null || _r === void 0 ? void 0 : _r.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_s = rules.ValidateMinMax) === null || _s === void 0 ? void 0 : _s.message) {\n                      setErrorText((_t = rules.ValidateMinMax) === null || _t === void 0 ? void 0 : _t.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_u = rules.ValidateMinMax) === null || _u === void 0 ? void 0 : _u.onsuccess) {\n                    (_v = rules.ValidateMinMax) === null || _v === void 0 ? void 0 : _v.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      } else if (((_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.when) === \"onblur\") {\n        inputs.forEach(function (input) {\n          input.addEventListener(\"blur\", function (event) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\n            var input = event.target;\n            var min = input.min;\n            var max = input.max;\n            var value = input.value;\n            var type = input.type;\n            var inputMinMessage = input.getAttribute(\"data-min-message\");\n            var inputMaxMessage = input.getAttribute(\"data-max-message\");\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if ((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.exceedsMin) {\n                    (_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_c = rules.ValidateMinMax) === null || _c === void 0 ? void 0 : _c.message) {\n                      setErrorText((_d = rules.ValidateMinMax) === null || _d === void 0 ? void 0 : _d.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if ((_e = rules.ValidateMinMax) === null || _e === void 0 ? void 0 : _e.exceedsMax) {\n                    (_f = rules.ValidateMinMax) === null || _f === void 0 ? void 0 : _f.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_g = rules.ValidateMinMax) === null || _g === void 0 ? void 0 : _g.message) {\n                      setErrorText((_h = rules.ValidateMinMax) === null || _h === void 0 ? void 0 : _h.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_j = rules.ValidateMinMax) === null || _j === void 0 ? void 0 : _j.onsuccess) {\n                    (_k = rules.ValidateMinMax) === null || _k === void 0 ? void 0 : _k.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if ((_l = rules.ValidateMinMax) === null || _l === void 0 ? void 0 : _l.exceedsMin) {\n                    (_m = rules.ValidateMinMax) === null || _m === void 0 ? void 0 : _m.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_o = rules.ValidateMinMax) === null || _o === void 0 ? void 0 : _o.message) {\n                      setErrorText((_p = rules.ValidateMinMax) === null || _p === void 0 ? void 0 : _p.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if ((_q = rules.ValidateMinMax) === null || _q === void 0 ? void 0 : _q.exceedsMax) {\n                    (_r = rules.ValidateMinMax) === null || _r === void 0 ? void 0 : _r.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_s = rules.ValidateMinMax) === null || _s === void 0 ? void 0 : _s.message) {\n                      setErrorText((_t = rules.ValidateMinMax) === null || _t === void 0 ? void 0 : _t.message.max);\n                    }\n                  }\n                } else {\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  input.style.borderColor = \"\";\n                  if ((_u = rules.ValidateMinMax) === null || _u === void 0 ? void 0 : _u.onsuccess) {\n                    (_v = rules.ValidateMinMax) === null || _v === void 0 ? void 0 : _v.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    };\n    var runValidateEmail = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var emailPattern;\n      var type = (_a = rules.ValidateEmail) === null || _a === void 0 ? void 0 : _a.type;\n      var emailInput = form.querySelector(\"input[name=\\\"\".concat((_b = rules.ValidateEmail) === null || _b === void 0 ? void 0 : _b.emailInput, \"\\\"]\"));\n      var message = (_c = rules.ValidateEmail) === null || _c === void 0 ? void 0 : _c.message;\n      var onsuccess = (_d = rules.ValidateEmail) === null || _d === void 0 ? void 0 : _d.onsuccess;\n      var invalid = (_e = rules.ValidateEmail) === null || _e === void 0 ? void 0 : _e.invalid;\n      var when = (_f = rules.ValidateEmail) === null || _f === void 0 ? void 0 : _f.when;\n      switch (type) {\n        case \"personal\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"business\":\n          emailPattern = /^(?!.*@(?:gmail|yahoo|hotmail|outlook)\\.com$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n          break;\n        case \"yahoo\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@yahoo\\.com$/;\n          break;\n        case \"gmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n          break;\n        case \"hotmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(hotmail|outlook)\\.com$/;\n          break;\n        case \"aol\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@aol\\.com$/;\n          break;\n        case \"isp\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(comcast|verizon|att)\\.com$/;\n          break;\n        case \"education\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(edu)$/;\n          break;\n        case \"government\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(gov)$/;\n          break;\n        case \"nonprofit\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(org)$/;\n          break;\n        case \"international\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}$/;\n          break;\n        case \"domain-specific\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(support|sales|info)\\.[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"alias\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        default:\n          return false;\n      }\n      if (when === \"onblur\") {\n        emailInput.addEventListener(\"blur\", function () {\n          var email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        emailInput.addEventListener(\"input\", function () {\n          var email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidatePattern = function () {\n      var _a;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat((_a = rules.ValidatePattern) === null || _a === void 0 ? void 0 : _a.input, \"\\\"]\"));\n      var options = rules.ValidatePattern;\n      if ((options === null || options === void 0 ? void 0 : options.when) === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var input = inputElement.value;\n          if ((options === null || options === void 0 ? void 0 : options.allowEmpty) && input.length === 0) {\n            return true;\n          }\n          var regex;\n          switch (options === null || options === void 0 ? void 0 : options.type) {\n            case \"regex\":\n              regex = new RegExp(options === null || options === void 0 ? void 0 : options.pattern, options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\"^\" + (options === null || options === void 0 ? void 0 : options.pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\").replace(/\\\\\\*/g, \".*\").replace(/\\\\\\?/g, \".\")) + \"$\", options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n          var isValid = regex.test(input);\n          if (isValid) {\n            if (options === null || options === void 0 ? void 0 : options.onsuccess) {\n              options === null || options === void 0 ? void 0 : options.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (options === null || options === void 0 ? void 0 : options.invalid) {\n              options === null || options === void 0 ? void 0 : options.invalid();\n            }\n            if (errorText) {\n              if (options === null || options === void 0 ? void 0 : options.errorMessage) {\n                errorText.innerText = options === null || options === void 0 ? void 0 : options.errorMessage;\n              }\n            }\n          }\n        });\n      } else if ((options === null || options === void 0 ? void 0 : options.when) === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var input = inputElement.value;\n          if ((options === null || options === void 0 ? void 0 : options.allowEmpty) && input.length === 0) {\n            return true;\n          }\n          var regex;\n          switch (options === null || options === void 0 ? void 0 : options.type) {\n            case \"regex\":\n              regex = new RegExp(options === null || options === void 0 ? void 0 : options.pattern, options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\"^\" + (options === null || options === void 0 ? void 0 : options.pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\").replace(/\\\\\\*/g, \".*\").replace(/\\\\\\?/g, \".\")) + \"$\", options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n          var isValid = regex.test(input);\n          console.log(isValid, input, options.pattern);\n          if (isValid) {\n            if (options === null || options === void 0 ? void 0 : options.onsuccess) {\n              options === null || options === void 0 ? void 0 : options.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (options === null || options === void 0 ? void 0 : options.invalid) {\n              options === null || options === void 0 ? void 0 : options.invalid();\n            }\n            if (errorText) {\n              if (options === null || options === void 0 ? void 0 : options.errorMessage) {\n                errorText.innerText = options === null || options === void 0 ? void 0 : options.errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidatePhone = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var phoneInput = form.querySelector(\"input[name=\\\"\".concat((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.phoneInput, \"\\\"]\"));\n      var countryCode = (_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.countryCode;\n      var when = (_c = rules.ValidatePhone) === null || _c === void 0 ? void 0 : _c.when;\n      var onsuccess = (_d = rules.ValidatePhone) === null || _d === void 0 ? void 0 : _d.onsuccess;\n      var invalid = (_e = rules.ValidatePhone) === null || _e === void 0 ? void 0 : _e.invalid;\n      var message = (_f = rules.ValidatePhone) === null || _f === void 0 ? void 0 : _f.message;\n      var mobileRegex = /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/;\n      var landlineRegex = /^(\\+?254|0)?([2-69][0-9]{6,7})$/;\n      if (when === \"onblur\") {\n        phoneInput.addEventListener(\"blur\", function () {\n          var _a, _b;\n          var phoneNumber = phoneInput.value;\n          var isValid = false;\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (var _i = 0, _c = Object.values(countryCodeRegexMap); _i < _c.length; _i++) {\n              var regex = _c[_i];\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"red\";\n            } else {\n              phoneInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n          if ((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(landlineRegex.test(phoneNumber));\n          }\n          if ((_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      } else if (when === \"typing\") {\n        phoneInput.addEventListener(\"input\", function () {\n          var _a, _b;\n          var phoneNumber = phoneInput.value;\n          var isValid = false;\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (var _i = 0, _c = Object.values(countryCodeRegexMap); _i < _c.length; _i++) {\n              var regex = _c[_i];\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n          if ((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(landlineRegex.test(phoneNumber));\n          }\n          if ((_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      }\n    };\n    var runValidateNumber = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n      var min = (_a = rules.ValidateNumber) === null || _a === void 0 ? void 0 : _a.min;\n      var max = (_b = rules.ValidateNumber) === null || _b === void 0 ? void 0 : _b.max;\n      var inputName = (_c = rules.ValidateNumber) === null || _c === void 0 ? void 0 : _c.input;\n      var when = (_d = rules.ValidateNumber) === null || _d === void 0 ? void 0 : _d.when;\n      var decimalPlaces = (_e = rules.ValidateNumber) === null || _e === void 0 ? void 0 : _e.decimalPlaces;\n      var allowNegative = (_f = rules.ValidateNumber) === null || _f === void 0 ? void 0 : _f.allowNegative;\n      var integersOnly = (_g = rules.ValidateNumber) === null || _g === void 0 ? void 0 : _g.integersOnly;\n      var base = (_h = rules.ValidateNumber) === null || _h === void 0 ? void 0 : _h.base;\n      var customErrorMessages = (_j = rules.ValidateNumber) === null || _j === void 0 ? void 0 : _j.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name='\".concat(inputName, \"']\"));\n      var errorMessage;\n      var onsuccess = (_k = rules.ValidateNumber) === null || _k === void 0 ? void 0 : _k.onsuccess;\n      var invalid = (_l = rules.ValidateNumber) === null || _l === void 0 ? void 0 : _l.invalid;\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          errorMessage = undefined;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          var input = inputElement.value;\n          var num = Number(input);\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage: (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.invalidNumber) || \"Invalid number\"\n            };\n          }\n          // Check if the number is within the specified range\n          if (min !== undefined && num < min || max !== undefined && num > max) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.range) || \"Number must be between \".concat(min, \" and \").concat(max);\n          }\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            var numStr = num.toString();\n            var decimalIndex = numStr.indexOf(\".\");\n            var numDecimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.decimalPlaces) || \"Number must have no more than \".concat(decimalPlaces, \" decimal places\");\n            }\n          }\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.negative) || \"Negative numbers are not allowed\";\n          }\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.integersOnly) || \"Only integers are allowed\";\n          }\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            var parsedNum = parseInt(input, base);\n            if (isNaN(parsedNum)) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.base) || \"Number must be in base \".concat(base);\n            }\n          }\n          // If no error message was set, the validation passed\n          if (errorMessage === undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          errorMessage = undefined;\n          var input = inputElement.value;\n          var num = Number(input);\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage: (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.invalidNumber) || \"Invalid number\"\n            };\n          }\n          // Check if the number is within the specified range\n          if (min !== undefined && num < min || max !== undefined && num > max) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.range) || \"Number must be between \".concat(min, \" and \").concat(max);\n          }\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            var numStr = num.toString();\n            var decimalIndex = numStr.indexOf(\".\");\n            var numDecimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.decimalPlaces) || \"Number must have no more than \".concat(decimalPlaces, \" decimal places\");\n            }\n          }\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.negative) || \"Negative numbers are not allowed\";\n          }\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.integersOnly) || \"Only integers are allowed\";\n          }\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            var parsedNum = parseInt(input, base);\n            if (isNaN(parsedNum)) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.base) || \"Number must be in base \".concat(base);\n            }\n          }\n          // If no error message was set, the validation passed\n          if (errorMessage == undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateInteger = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n      var when = (_a = rules.ValidateInteger) === null || _a === void 0 ? void 0 : _a.when;\n      var input = (_b = rules.ValidateInteger) === null || _b === void 0 ? void 0 : _b.input;\n      var minValue = (_c = rules.ValidateInteger) === null || _c === void 0 ? void 0 : _c.minValue;\n      var maxValue = (_d = rules.ValidateInteger) === null || _d === void 0 ? void 0 : _d.maxValue;\n      var uniqueValues = (_e = rules.ValidateInteger) === null || _e === void 0 ? void 0 : _e.uniqueValues;\n      var positiveOnly = (_f = rules.ValidateInteger) === null || _f === void 0 ? void 0 : _f.positiveOnly;\n      var evenOnly = (_g = rules.ValidateInteger) === null || _g === void 0 ? void 0 : _g.evenOnly;\n      var divisibleBy = (_h = rules.ValidateInteger) === null || _h === void 0 ? void 0 : _h.divisibleBy;\n      var invalid = (_j = rules.ValidateInteger) === null || _j === void 0 ? void 0 : _j.invalid;\n      var customErrorMessages = (_k = rules.ValidateInteger) === null || _k === void 0 ? void 0 : _k.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var value = Number(inputElement.value);\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var errorMessage = __assign({\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: \"The value must be between \".concat(minValue, \" and \").concat(maxValue),\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: \"The value must be divisible by \".concat(divisibleBy)\n          }, customErrorMessages);\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n          // Check that the input value is within the specified range (if provided)\n          if (minValue !== undefined && value < minValue || maxValue !== undefined && value > maxValue) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var value = Number(inputElement.value);\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var errorMessage = __assign({\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: \"The value must be between \".concat(minValue, \" and \").concat(maxValue),\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: \"The value must be divisible by \".concat(divisibleBy)\n          }, customErrorMessages);\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n          // Check that the input value is within the specified range (if provided)\n          if (minValue !== undefined && value < minValue || maxValue !== undefined && value > maxValue) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateFloat = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var when = (_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.when;\n      var input = (_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.input;\n      var customErrorMessages = (_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      var defaultErrorMessages = __assign({\n        required: \"This field is required\",\n        invalid: \"Please enter a valid number\",\n        min: \"Please enter a number greater than or equal to \".concat((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.min),\n        max: \"Please enter a number less than or equal to \".concat((_e = rules.ValidateFloat) === null || _e === void 0 ? void 0 : _e.max),\n        precision: \"Please enter a number with at most \".concat((_f = rules.ValidateFloat) === null || _f === void 0 ? void 0 : _f.precision, \" decimal places\")\n      }, customErrorMessages);\n      var errorMessages = defaultErrorMessages;\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var _a, _b, _c, _d;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var value = inputElement.value;\n          var isEmpty = !value.trim();\n          if (((_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.required) && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required;\n              }\n            }\n          }\n          var numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid;\n              }\n            }\n          }\n          if (((_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.min) !== undefined && numberValue < rules.ValidateFloat.min) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min;\n              }\n            }\n          }\n          if (((_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.max) !== undefined && numberValue > rules.ValidateFloat.max) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max;\n              }\n            }\n          }\n          if (((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.precision) !== undefined) {\n            var parts = value.split(\".\");\n            if (parts.length === 2 && parts[1].length > rules.ValidateFloat.precision) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var _a, _b, _c, _d;\n          var value = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var isEmpty = !value.trim();\n          if (((_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.required) && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required;\n              }\n            }\n          }\n          var numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid;\n              }\n            }\n          }\n          if (((_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.min) !== undefined && numberValue < rules.ValidateFloat.min) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min;\n              }\n            }\n          }\n          if (((_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.max) !== undefined && numberValue > rules.ValidateFloat.max) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max;\n              }\n            }\n          }\n          if (((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.precision) !== undefined) {\n            var parts = value.split(\".\");\n            if (parts.length === 2 && parts[1].length > rules.ValidateFloat.precision) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    if (rules) {\n      if (rules.validateRequired) {\n        runValidateRequired();\n      } else if (rules.ValidateMinMax) {\n        runValidateMinMax();\n      } else if (rules.ValidateEmail) {\n        runValidateEmail();\n      } else if (rules.ValidatePattern) {\n        runValidatePattern();\n      } else if (rules.ValidatePhone) {\n        runValidatePhone();\n      } else if (rules.ValidateNumber) {\n        runValidateNumber();\n      } else if (rules.ValidateInteger) {\n        runValidateInteger();\n      } else if (rules.ValidateFloat) {\n        runValidateFloat();\n      }\n    }\n  };\n  ValidateForm.prototype.render = function () {\n    return react_1.default.createElement(\"div\", {\n      id: \"_validation_wrapper\"\n    }, this.props.children);\n  };\n  return ValidateForm;\n}(react_1.default.Component);\nexports.default = ValidateForm;","map":{"version":3,"names":["react_1","__importDefault","require","countryCodeRegexMap","US","CA","MX","GB","FR","DE","JP","AU","NZ","IN","CN","HK","SG","TW","KR","TH","PH","VN","MY","BE","NL","IT","ES","PT","AT","CH","SE","NO","DK","FI","BR","AR","CO","PE","CL","VE","CR","PA","DO","GT","EC","UY","PY","BO","HN","NI","SV","PR","JM","BB","KY","VG","TT","DM","GD","GH","KE","NG","UG","RW","CM","SN","TZ","CI","MG","ZM","ZW","MW","LS","SZ","KM","DJ","RE","YT","WF","NU","TK","FM","MH","SA","RU","ValidateForm","_super","__extends","prototype","componentDidMount","init","componentDidUpdate","prevProps","props","rules","_a","onSubmit","errorElement","allowedKeys","wrapper","document","getElementById","form","children","submit_button","querySelector","errorText","errorMessage","String","querySelectorAll","forEach","input","style","transition","addEventListener","e","preventDefault","innerHTML","submit","setErrorText","message","innerText","runValidateRequired","event","target","borderColor","requiredInputs","validateRequired","applyOnly","_b","inputName","push","concat","missingInputs","value","length","index","notvalidated","focus","_c","action","border","_d","_e","_f","_g","onsuccess","runValidateMinMax","inputs","ValidateMinMax","when","min","max","type","inputMinMessage","getAttribute","inputMaxMessage","exceedsMin","exceedsMax","_h","_j","_k","Number","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","runValidateEmail","emailPattern","ValidateEmail","emailInput","invalid","email","test","runValidatePattern","inputElement","ValidatePattern","options","allowEmpty","regex","RegExp","pattern","modifiers","replace","Error","isValid","console","log","runValidatePhone","phoneInput","ValidatePhone","countryCode","mobileRegex","landlineRegex","phoneNumber","_i","Object","values","isLandlineNumber","isMobileNumber","runValidateNumber","ValidateNumber","decimalPlaces","allowNegative","integersOnly","base","customErrorMessages","undefined","num","isNaN","invalidNumber","range","numStr","toString","decimalIndex","indexOf","numDecimalPlaces","negative","isInteger","parsedNum","parseInt","runValidateInteger","ValidateInteger","minValue","maxValue","uniqueValues","positiveOnly","evenOnly","divisibleBy","__assign","notANumber","notAnInteger","outOfRange","notUnique","notPositive","notEven","notDivisible","includes","runValidateFloat","ValidateFloat","defaultErrorMessages","required","precision","errorMessages","isEmpty","trim","numberValue","parseFloat","isFinite","parts","split","render","default","createElement","id","Component","exports"],"sources":["/Users/arshadyaseen/Desktop/ReactFromValidator/form-validation-react/src/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\n\ninterface ValidateRequiredObj {\n  applyOnly: Array<string>;\n  action: \"both\" | \"input_red_border\" | \"show_error_message\";\n  notvalidated: Function;\n  onsuccess: Function;\n  message: string;\n}\ninterface ValidateMinMaxObj {\n  when: \"onblur\" | \"typing\";\n  message: {\n    min: string;\n    max: string;\n  };\n  onsuccess: Function;\n  exceedsMax: Function;\n  exceedsMin: Function;\n}\ninterface ValidatePatternObj {\n  when: \"onblur\" | \"typing\";\n  input: string;\n  pattern: string;\n  type?: \"regex\" | \"wildcard\";\n  modifiers?: string;\n  errorMessage?: string;\n  allowEmpty?: boolean;\n  onsuccess: Function;\n  invalid: Function;\n}\ninterface ValidatePhoneObj {\n  when: \"onblur\" | \"typing\";\n  countryCode:\n    | \"US\"\n    | \"CA\"\n    | \"MX\"\n    | \"GB\"\n    | \"FR\"\n    | \"DE\"\n    | \"JP\"\n    | \"AU\"\n    | \"NZ\"\n    | \"IN\"\n    | \"CN\"\n    | \"HK\"\n    | \"SG\"\n    | \"TW\"\n    | \"KR\"\n    | \"TH\"\n    | \"PH\"\n    | \"VN\"\n    | \"MY\"\n    | \"BE\"\n    | \"NL\"\n    | \"IT\"\n    | \"ES\"\n    | \"PT\"\n    | \"AT\"\n    | \"CH\"\n    | \"SE\"\n    | \"NO\"\n    | \"DK\"\n    | \"FI\"\n    | \"BR\"\n    | \"AR\"\n    | \"CO\"\n    | \"PE\"\n    | \"CL\"\n    | \"VE\"\n    | \"CR\"\n    | \"PA\"\n    | \"DO\"\n    | \"GT\"\n    | \"EC\"\n    | \"UY\"\n    | \"PY\"\n    | \"BO\"\n    | \"HN\"\n    | \"NI\"\n    | \"SV\"\n    | \"PR\"\n    | \"JM\"\n    | \"BB\"\n    | \"KY\"\n    | \"VG\"\n    | \"TT\"\n    | \"DM\"\n    | \"GD\"\n    | \"GH\"\n    | \"KE\"\n    | \"NG\"\n    | \"UG\"\n    | \"RW\"\n    | \"CM\"\n    | \"SN\"\n    | \"TZ\"\n    | \"CI\"\n    | \"MG\"\n    | \"ZM\"\n    | \"ZW\"\n    | \"MW\"\n    | \"LS\"\n    | \"SZ\"\n    | \"KM\"\n    | \"DJ\"\n    | \"RE\"\n    | \"YT\"\n    | \"WF\"\n    | \"NU\"\n    | \"TK\"\n    | \"FM\"\n    | \"MH\"\n    | \"SA\"\n    | \"RU\";\n  phoneInput: string;\n  onsuccess: Function;\n  invalid: Function;\n  message: string;\n  isLandlineNumber: Function;\n  isMobileNumber: Function;\n}\n\ninterface ValidateEmailObj {\n  when: \"onblur\" | \"typing\";\n  message: string;\n  onsuccess: Function;\n  invalid: Function;\n  emailInput: string;\n  type:\n    | \"personal\"\n    | \"business\"\n    | \"yahoo\"\n    | \"gmail\"\n    | \"hotmail\"\n    | \"aol\"\n    | \"isp\"\n    | \"education\"\n    | \"government\"\n    | \"nonprofit\"\n    | \"international\"\n    | \"domain-specific\"\n    | \"alias\";\n}\n\ninterface ValidateNumberObj {\n  when: \"onblur\" | \"typing\";\n  input: string;\n  min?: number;\n  max?: number;\n  decimalPlaces?: number;\n  allowNegative?: boolean;\n  integersOnly?: boolean;\n  base?: number;\n  customErrorMessages: {\n    [key: string]: string;\n  };\n  onsuccess?: Function;\n  invalid?: Function;\n}\ninterface ValidateIntegerObj {\n  when: \"onblur\" | \"typing\";\n  input: string;\n  minValue?: number;\n  maxValue?: number;\n  uniqueValues?: number[];\n  positiveOnly?: boolean;\n  evenOnly?: boolean;\n  divisibleBy?: number;\n  invalid?: Function;\n  customErrorMessages?: {\n    notANumber?: string;\n    notAnInteger?: string;\n    outOfRange?: string;\n    notUnique?: string;\n    notPositive?: string;\n    notEven?: string;\n    notDivisible?: string;\n  };\n}\n\ninterface ValidateFloatObj {\n  when: \"onblur\" | \"typing\";\n  input: string;\n  invalid?: string;\n  required?: boolean;\n  min?: number;\n  max?: number;\n  precision?: number;\n  customErrorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n    precision?: string;\n  };\n}\ninterface ValidateDateObj {\n  when: \"onblur\" | \"typing\";\n  input: string | Date;\n  minDate?: Date;\n  maxDate?: Date;\n  isBusinessDay?: boolean;\n  isWeekend?: boolean;\n  customFormat?: string;\n  timeZone?: string;\n  customErrorMessages?: {\n    invalidDate?: string;\n    minDate?: string;\n    maxDate?: string;\n    businessDay?: string;\n    weekend?: string;\n    invalidFormat?: string;\n    invalidTimeZone?: string;\n  };\n}\ninterface Rules {\n  validateRequired?: ValidateRequiredObj;\n  ValidateMinMax?: ValidateMinMaxObj;\n  ValidateEmail?: ValidateEmailObj;\n  ValidatePattern?: ValidatePatternObj;\n  ValidatePhone?: ValidatePhoneObj;\n  ValidateNumber?: ValidateNumberObj;\n  ValidateInteger?: ValidateIntegerObj;\n  ValidateFloat?: ValidateFloatObj;\n  ValidateDate?: ValidateDateObj;\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  rules: Rules;\n  errorElement: string;\n  onSubmit: FunctionComponent;\n}\n\ninterface ValidateForm {\n  props: Props;\n}\n\ninterface CountryCodeRegexMap {\n  [countryCode: string]: RegExp;\n}\n\nconst countryCodeRegexMap: CountryCodeRegexMap = {\n  US: /^(\\+?1)?[2-9]\\d{9}$/,\n  CA: /^(\\+?1)?[2-9]\\d{9}$/,\n  MX: /^(\\+?52)?(1)?\\d{10}$/,\n  GB: /^(\\+?44|0)7\\d{9}$/,\n  FR: /^(\\+?33|0)[67]\\d{8}$/,\n  DE: /^(\\+49|0)[1-9]\\d{10}$/,\n  JP: /^(\\+?81|0)\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{4}$/,\n  AU: /^(\\+?61|0)[45789]\\d{8}$/,\n  NZ: /^(\\+?64|0)[28]\\d{7,9}$/,\n  IN: /^(\\+?91|0)?[6789]\\d{9}$/,\n  CN: /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  HK: /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\n  SG: /^(\\+65)?[89]\\d{7}$/,\n  TW: /^(\\+?886\\-?|0)?9\\d{8}$/,\n  KR: /^(\\+?82|0)?1[0-9]{1,2}-?[0-9]{3,4}-?[0-9]{4}$/,\n  TH: /^(\\+66|66|0)\\d{8}$/,\n  PH: /^(\\+?63|0)?[89]\\d{9}$/,\n  VN: /^(\\+?84|0)?[1-9]\\d{8}$/,\n  MY: /^(\\+?6?01){1}(([145]{1}(-|\\s)?\\d{7,8})|([236789]{1}(\\s|-)?\\d{7}))$/,\n  BE: /^(\\+?32|0)4?\\d{8}$/,\n  NL: /^(\\+?31|0)6?\\d{8}$/,\n  IT: /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  ES: /^(\\+?34)?[-. ]?6\\d{8}$/,\n  PT: /^(\\+351)?9[1236]\\d{7}$/,\n  AT: /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  CH: /^(\\+41|0)([1-9])\\d{1,12}$/,\n  SE: /^(\\+?46|0)7\\d{8}$/,\n  NO: /^(\\+?47)?[49]\\d{7}$/,\n  DK: /^(\\+?45)?(\\d{8})$/,\n  FI: /^(\\+?358|0)\\s?(4(0|1|2|4|5)|50|4(6|7)|[5-7]|9\\d)\\s?\\d{6,7}$/,\n  BR: /^(\\+?55|0)?([1-9]{2})?([6-9]{1})(\\d{8})$/,\n  AR: /^(\\+?54|0)?([1-9])?([1-9])(\\d{7,8})$/,\n  CO: /^(\\+?57|0)?([1-8]{1})?([2-4]{1})(\\d{7})$/,\n  PE: /^(\\+?51|0)?([1-9]{2})?([1-9]{1})(\\d{7})$/,\n  CL: /^(\\+?56|0)?([2-9]{1})?([2-9])(\\d{6,7})$/,\n  VE: /^(\\+?58|0)?([4]{1})(1|2|4|6)(\\d{7})$/,\n  CR: /^(\\+?506)?([2-8]{1})(\\d{7})$/,\n  PA: /^(\\+?507)?([2-8]{1})(\\d{7})$/,\n  DO: /^(\\+?1|0)?([8]{1})(0|1)(\\d{7})$/,\n  GT: /^(\\+?502)?([23]{1})(\\d{7})$/,\n  EC: /^(\\+?593|0)([679]{1})(\\d{7})$/,\n  UY: /^(\\+?598|0)([4]{1}[2-9]{1}|[5-9]{1})(\\d{6})$/,\n  PY: /^(\\+?595|0)([9]{1})([1-9]{1})(\\d{6})$/,\n  BO: /^(\\+?591)?([267]{1})(\\d{7})$/,\n  HN: /^(\\+?504)?([239]{1})(\\d{7})$/,\n  NI: /^(\\+?505)?([5689]{1})(\\d{7})$/,\n  SV: /^(\\+?503)?([67]{1})(\\d{7})$/,\n  PR: /^(\\+?1)?([0]{1}[78]{1}|[2367]{1})(\\d{7})$/,\n  JM: /^(\\+?1)?([8]{1}[79]{1}|[45]{1}[67]{1})(\\d{7})$/,\n  BB: /^(\\+?1)?([246]{1})(\\d{7})$/,\n  KY: /^(\\+?1)?([345]{1}([01]{1}|[69]{1})|[24]{1}([26]{1}|[46]{1})|[78]{1}([4]{1}|[5]{1}|[7]{1}|[9]{1}))(\\d{6})$/,\n  VG: /^(\\+?1)?([284]{1})(\\d{7})$/,\n  TT: /^(\\+?1)?([868]{1})(\\d{7})$/,\n  DM: /^(\\+?1)?([767]{1})(\\d{7})$/,\n  GD: /^(\\+?1)?([473]{1})(\\d{7})$/,\n  GH: /^(\\+?233|0)?([23]0|[57][0567]|6[679]|8[124567])(\\d{7})$/,\n  KE: /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/,\n  NG: /^(\\+?234|0)?[789]\\d{9}$/,\n  UG: /^(\\+?256|0)?([39]0|[47][057]|[568][056]|[7-9][089])(\\d{7})$/,\n  RW: /^(\\+?250|0)?[7]\\d{8}$/,\n  CM: /^(\\+?237|0)?(6[57]|2[2368]|3[89]|4[6-8]|[78]0|\\d{2})(\\d{6,7})$/,\n  SN: /^(\\+?221|0)?[76][05](\\d{7}|\\d{8})$/,\n  TZ: /^(\\+?255|0)?[67]\\d{8}$/,\n  CI: /^(\\+?225|0)?[017]\\d{7}$/,\n  MG: /^(\\+?261|0)?[2368]\\d{7}$/,\n  ZM: /^(\\+?26[01]|0)?[567]\\d{8}$/,\n  ZW: /^(\\+?263|0)?[17]\\d{8}$/,\n  MW: /^(\\+?265|0)?[11768]\\d{7}$/,\n  LS: /^(\\+?266|0)?[5-8]\\d{7}$/,\n  SZ: /^(\\+?268|0)?[7]\\d{7}$/,\n  KM: /^(\\+?269|0)?[269]\\d{7}$/,\n  DJ: /^(\\+?253|0)?[77-9](\\d{6})$/,\n  RE: /^(\\+?262|0)?[269]\\d{8}$/,\n  YT: /^(\\+?262|0)?[639]\\d{8}$/,\n  WF: /^(\\+?681|0)?\\d{6}$/,\n  NU: /^(\\+?683|0)?\\d{4}$/,\n  TK: /^(\\+?690|0)?\\d{4}$/,\n  FM: /^(\\+?691|0)?[1-9]\\d{3}$/,\n  MH: /^(\\+?692|0)?\\d{7}$/,\n  SA: /^(\\+?966|0)?5[0-9]{8}$/,\n  RU: /^(\\+?7|8)?9\\d{9}$/,\n};\n\nclass ValidateForm extends React.Component<Props> {\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.rules !== prevProps.rules) {\n      this.init();\n    }\n  }\n\n  init() {\n    let { rules, onSubmit } = this.props;\n    let { errorElement } = this.props;\n    let allowedKeys: Array<keyof Rules> = [\n      \"validateRequired\",\n      \"ValidateMinMax\",\n      \"ValidateEmail\",\n      \"ValidatePattern\",\n      \"ValidatePhone\",\n      \"ValidateNumber\",\n      \"ValidateInteger\",\n      \"ValidateFloat\",\n      \"ValidateDate\",\n    ];\n\n    let wrapper = document.getElementById(\"_validation_wrapper\");\n    let form = wrapper?.children[0] as HTMLFormElement;\n    let submit_button =\n      (form.querySelector('button[type=\"submit\"]') as HTMLFormElement) ||\n      (form.querySelector('input[type=\"submit\"]') as HTMLFormElement);\n    let errorText = document.querySelector(errorElement) as HTMLElement;\n    let errorMessage = String;\n\n    form.querySelectorAll(\"input\").forEach((input) => {\n      if (input.style.transition === \"\") {\n        input.style.transition = \"0.2s ease-in-out\";\n      }\n    });\n\n    if (submit_button) {\n      form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n        if (errorText.innerHTML === \"\") {\n          if (onSubmit) {\n            onSubmit(e);\n          } else {\n            form.submit();\n          }\n        }\n      });\n    }\n\n    const setErrorText = (message: string) => {\n      if (errorText) {\n        errorText.innerText = message;\n      }\n    };\n\n    const runValidateRequired = () => {\n      // Check If All Required Feilds Filled\n\n      form.addEventListener(\"input\", (event) => {\n        const input = event.target as HTMLInputElement;\n\n        input.style.borderColor = \"\";\n      });\n\n      const submit_button =\n        form?.querySelector<HTMLInputElement>('button[type=\"submit\"]') ||\n        form?.querySelector<HTMLInputElement>('input[type=\"submit\"]');\n\n      submit_button?.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n\n        let requiredInputs: HTMLInputElement[] = [];\n\n        if (rules.validateRequired?.applyOnly) {\n          rules.validateRequired?.applyOnly.forEach((inputName: String) => {\n            requiredInputs.push(\n              form?.querySelector<HTMLInputElement>(\n                `[name=\"${inputName}\"]`\n              ) as HTMLInputElement\n            );\n          });\n        } else {\n          form\n            ?.querySelectorAll<HTMLInputElement>(\"input[required]\")\n            .forEach((input) => {\n              requiredInputs.push(input);\n            });\n        }\n\n        const missingInputs: HTMLInputElement[] = [];\n\n        requiredInputs?.forEach((input) => {\n          if (!input.value) {\n            missingInputs.push(input);\n          }\n        });\n\n        if (missingInputs.length > 0) {\n          missingInputs.forEach((input, index) => {\n            if (rules.validateRequired?.notvalidated) {\n              rules.validateRequired?.notvalidated(missingInputs);\n            }\n            if (index === 0) {\n              input.focus();\n            }\n            if (rules.validateRequired?.action === \"input_red_border\") {\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            } else if (\n              rules.validateRequired?.action === \"show_error_message\"\n            ) {\n              if (rules.validateRequired.message) {\n                setErrorText(rules.validateRequired.message);\n              }\n            } else if (rules.validateRequired?.action === \"both\") {\n              if (rules.validateRequired?.message) {\n                setErrorText(rules.validateRequired?.message);\n              }\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            }\n          });\n        } else {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (rules.validateRequired?.onsuccess) {\n            rules.validateRequired?.onsuccess();\n          }\n        }\n      });\n    };\n\n    const runValidateMinMax = () => {\n      const inputs = form.querySelectorAll(\"input[min][max]\");\n\n      if (rules.ValidateMinMax?.when === \"typing\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"input\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules.ValidateMinMax?.exceedsMin) {\n                    rules.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules.ValidateMinMax?.exceedsMax) {\n                    rules.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules.ValidateMinMax?.onsuccess) {\n                    rules.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules.ValidateMinMax?.exceedsMin) {\n                    rules.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules.ValidateMinMax?.exceedsMax) {\n                    rules.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n\n                  if (rules.ValidateMinMax?.onsuccess) {\n                    rules.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      } else if (rules.ValidateMinMax?.when === \"onblur\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"blur\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules.ValidateMinMax?.exceedsMin) {\n                    rules.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules.ValidateMinMax?.exceedsMax) {\n                    rules.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules.ValidateMinMax?.onsuccess) {\n                    rules.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules.ValidateMinMax?.exceedsMin) {\n                    rules.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules.ValidateMinMax?.exceedsMax) {\n                    rules.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules.ValidateMinMax?.message) {\n                      setErrorText(rules.ValidateMinMax?.message.max);\n                    }\n                  }\n                } else {\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  input.style.borderColor = \"\";\n                  if (rules.ValidateMinMax?.onsuccess) {\n                    rules.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    };\n\n    const runValidateEmail = () => {\n      let emailPattern: RegExp;\n      let type = rules.ValidateEmail?.type;\n      let emailInput = form.querySelector(\n        `input[name=\"${rules.ValidateEmail?.emailInput}\"]`\n      ) as HTMLInputElement;\n      let message = rules.ValidateEmail?.message;\n      let onsuccess = rules.ValidateEmail?.onsuccess;\n      let invalid = rules.ValidateEmail?.invalid;\n      let when = rules.ValidateEmail?.when;\n\n      switch (type) {\n        case \"personal\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"business\":\n          emailPattern =\n            /^(?!.*@(?:gmail|yahoo|hotmail|outlook)\\.com$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n          break;\n        case \"yahoo\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@yahoo\\.com$/;\n          break;\n        case \"gmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n          break;\n        case \"hotmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(hotmail|outlook)\\.com$/;\n          break;\n        case \"aol\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@aol\\.com$/;\n          break;\n        case \"isp\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(comcast|verizon|att)\\.com$/;\n          break;\n        case \"education\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(edu)$/;\n          break;\n        case \"government\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(gov)$/;\n          break;\n        case \"nonprofit\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(org)$/;\n          break;\n        case \"international\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}$/;\n          break;\n        case \"domain-specific\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@(support|sales|info)\\.[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"alias\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        default:\n          return false;\n      }\n\n      if (when === \"onblur\") {\n        emailInput.addEventListener(\"blur\", () => {\n          let email = emailInput.value;\n\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        emailInput.addEventListener(\"input\", () => {\n          let email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePattern = () => {\n      let inputElement = form.querySelector(\n        `input[name=\"${rules.ValidatePattern?.input}\"]`\n      ) as HTMLInputElement;\n      let options = rules.ValidatePattern;\n\n      if (options?.when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      } else if (options?.when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          console.log(isValid, input, options.pattern);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePhone = () => {\n      let phoneInput = form.querySelector(\n        `input[name=\"${rules.ValidatePhone?.phoneInput}\"]`\n      ) as HTMLInputElement;\n      let countryCode = rules.ValidatePhone?.countryCode;\n      let when = rules.ValidatePhone?.when;\n      let onsuccess = rules.ValidatePhone?.onsuccess;\n      let invalid = rules.ValidatePhone?.invalid;\n      let message = rules.ValidatePhone?.message;\n\n      const mobileRegex =\n        /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/;\n      const landlineRegex = /^(\\+?254|0)?([2-69][0-9]{6,7})$/;\n\n      if (when === \"onblur\") {\n        phoneInput.addEventListener(\"blur\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"red\";\n            } else {\n              phoneInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules.ValidatePhone?.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules.ValidatePhone?.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      } else if (when === \"typing\") {\n        phoneInput.addEventListener(\"input\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules.ValidatePhone?.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules.ValidatePhone?.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      }\n    };\n\n    const runValidateNumber = () => {\n      let min = rules.ValidateNumber?.min;\n      let max = rules.ValidateNumber?.max;\n      let inputName = rules.ValidateNumber?.input;\n      let when = rules.ValidateNumber?.when;\n      let decimalPlaces = rules.ValidateNumber?.decimalPlaces;\n      let allowNegative = rules.ValidateNumber?.allowNegative;\n      let integersOnly = rules.ValidateNumber?.integersOnly;\n      let base = rules.ValidateNumber?.base;\n      let customErrorMessages = rules.ValidateNumber?.customErrorMessages;\n      let inputElement = form.querySelector(\n        `input[name='${inputName}']`\n      ) as HTMLInputElement;\n      let errorMessage: string | undefined;\n      let onsuccess = rules.ValidateNumber?.onsuccess;\n      let invalid = rules.ValidateNumber?.invalid;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          errorMessage = undefined;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage === undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          errorMessage = undefined;\n\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage == undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateInteger = () => {\n      let when = rules.ValidateInteger?.when;\n      let input = rules.ValidateInteger?.input;\n      let minValue = rules.ValidateInteger?.minValue;\n      let maxValue = rules.ValidateInteger?.maxValue;\n      let uniqueValues = rules.ValidateInteger?.uniqueValues;\n      let positiveOnly = rules.ValidateInteger?.positiveOnly;\n      let evenOnly = rules.ValidateInteger?.evenOnly;\n      let divisibleBy = rules.ValidateInteger?.divisibleBy;\n      let invalid = rules.ValidateInteger?.invalid;\n      let customErrorMessages = rules.ValidateInteger?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n\n          const errorMessage = {\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n            ...customErrorMessages,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n\n          const errorMessage = {\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n            ...customErrorMessages,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateFloat = () => {\n      let when = rules.ValidateFloat?.when;\n      let input = rules.ValidateFloat?.input;\n      let customErrorMessages = rules.ValidateFloat?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        required: \"This field is required\",\n        invalid: \"Please enter a valid number\",\n        min: `Please enter a number greater than or equal to ${rules.ValidateFloat?.min}`,\n        max: `Please enter a number less than or equal to ${rules.ValidateFloat?.max}`,\n        precision: `Please enter a number with at most ${rules.ValidateFloat?.precision} decimal places`,\n        ...customErrorMessages,\n      };\n      const errorMessages = defaultErrorMessages;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n\n          let value = inputElement.value;\n\n          const isEmpty = !value.trim();\n          if (rules.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules.ValidateFloat?.min !== undefined &&\n            numberValue < rules.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules.ValidateFloat?.max !== undefined &&\n            numberValue > rules.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n\n          const isEmpty = !value.trim();\n          if (rules.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules.ValidateFloat?.min !== undefined &&\n            numberValue < rules.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules.ValidateFloat?.max !== undefined &&\n            numberValue > rules.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateDate = ()=> {\n      let when = rules.ValidateDate?.when;\n      let inputValue = rules.ValidateDate?.input;\n      let minDate = rules.ValidateDate?.minDate;\n      let maxDate = rules.ValidateDate?.maxDate;\n      let isBusinessDay = rules.ValidateDate?.isBusinessDay;\n      let isWeekend = rules.ValidateDate?.isWeekend;\n      let customFormat = rules.ValidateDate?.customFormat;\n      let timeZone = rules.ValidateDate?.timeZone;\n      let customErrorMessages = rules.ValidateDate?.customErrorMessages;\n      let inputElement = form.querySelector(`input[name=\"${inputValue}\"]`) as HTMLInputElement;\n      \n\n      const defaultErrorMessages = {\n        invalidDate: \"Invalid date format\",\n        minDate: \"Date is earlier than minimum allowed\",\n        maxDate: \"Date is later than maximum allowed\",\n        businessDay: \"Date is not a business day\",\n        weekend: \"Date is on a weekend\",\n        invalidFormat: \"Date is not in the expected format\",\n        invalidTimeZone: \"Time zone is not valid\",\n      };\n    \n      const errorMessages = {\n        ...defaultErrorMessages,\n        ...customErrorMessages,\n      };\n\n      if(when === \"typing\"){\n        inputElement.addEventListener(\"input\", () => {\n          let input = inputElement.value;\n          const date = new Date(input);\n\n          if (isNaN(date.getTime())) {\n            // errors.push(errorMessages.invalidDate);\n          } else {\n            if (minDate && date < minDate) {\n              // errors.push(errorMessages.minDate);\n            }\n            if (maxDate && date > maxDate) {\n              // errors.push(errorMessages.maxDate);\n            }\n            if (isBusinessDay && !isBusinessDay(date)) {\n              // errors.push(errorMessages.businessDay);\n            }\n            if (isWeekend && isWeekend(date)) {\n              errors.push(errorMessages.weekend);\n            }\n            if (customFormat) {\n              const formatter = new Intl.DateTimeFormat('en-US', { timeZone, format: customFormat });\n              const formattedDate = formatter.format(date);\n              if (formattedDate !== input.toString()) {\n                errors.push(errorMessages.invalidFormat);\n              }\n            }\n            if (timeZone) {\n              const timeZoneRegex = /^(?:Z|[+-](?:2[0-3]|[01]\\d):[0-5]\\d)$/;\n              if (!timeZoneRegex.test(timeZone)) {\n                errors.push(errorMessages.invalidTimeZone);\n              }\n            }\n          }\n\n        })\n      }\n\n\n\n    }\n\n    if (rules) {\n      if (rules.validateRequired) {\n        runValidateRequired();\n      } else if (rules.ValidateMinMax) {\n        runValidateMinMax();\n      } else if (rules.ValidateEmail) {\n        runValidateEmail();\n      } else if (rules.ValidatePattern) {\n        runValidatePattern();\n      } else if (rules.ValidatePhone) {\n        runValidatePhone();\n      } else if (rules.ValidateNumber) {\n        runValidateNumber();\n      } else if (rules.ValidateInteger) {\n        runValidateInteger();\n      } else if (rules.ValidateFloat) {\n        runValidateFloat();\n      } else if (rules.ValidateDate) {\n        runValidateDate();\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"_validation_wrapper\">{this.props.children}</div>;\n  }\n}\n\nexport default ValidateForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}