{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = __importDefault(require(\"react\"));\nfunction ValidateForm(props) {\n  return react_1.default.createElement(\"div\", {\n    id: '_validation_wrapper'\n  }, props.children);\n}\nexports.default = ValidateForm;","map":{"version":3,"names":["react_1","__importDefault","require","ValidateForm","props","default","createElement","id","children","exports"],"sources":["/Users/arshadyaseen/Desktop/ReactFormValidator/package/src/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\n\ninterface ValidateRequiredObj {\n  applyOnly?: Array<string>;\n  action: \"both\" | \"input_red_border\" | \"show_error_message\";\n  notvalidated?: Function;\n  onsuccess?: Function;\n  message?: string;\n}\ninterface ValidateMinMaxObj {\n  when?: \"onblur\" | \"typing\";\n  message?: {\n    min?: string;\n    max?: string;\n  };\n  onsuccess?: Function;\n  exceedsMax?: Function;\n  exceedsMin?: Function;\n}\ninterface ValidatePatternObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  pattern: string;\n  type?: \"regex\" | \"wildcard\";\n  modifiers?: string;\n  errorMessage?: string;\n  allowEmpty?: boolean;\n  onsuccess?: Function;\n  invalid?: Function;\n}\ninterface ValidatePhoneObj {\n  when: \"onblur\" | \"typing\";\n  countryCode:\n    | \"US\"\n    | \"CA\"\n    | \"MX\"\n    | \"GB\"\n    | \"FR\"\n    | \"DE\"\n    | \"JP\"\n    | \"AU\"\n    | \"NZ\"\n    | \"IN\"\n    | \"CN\"\n    | \"HK\"\n    | \"SG\"\n    | \"TW\"\n    | \"KR\"\n    | \"TH\"\n    | \"PH\"\n    | \"VN\"\n    | \"MY\"\n    | \"BE\"\n    | \"NL\"\n    | \"IT\"\n    | \"ES\"\n    | \"PT\"\n    | \"AT\"\n    | \"CH\"\n    | \"SE\"\n    | \"NO\"\n    | \"DK\"\n    | \"FI\"\n    | \"BR\"\n    | \"AR\"\n    | \"CO\"\n    | \"PE\"\n    | \"CL\"\n    | \"VE\"\n    | \"CR\"\n    | \"PA\"\n    | \"DO\"\n    | \"GT\"\n    | \"EC\"\n    | \"UY\"\n    | \"PY\"\n    | \"BO\"\n    | \"HN\"\n    | \"NI\"\n    | \"SV\"\n    | \"PR\"\n    | \"JM\"\n    | \"BB\"\n    | \"KY\"\n    | \"VG\"\n    | \"TT\"\n    | \"DM\"\n    | \"GD\"\n    | \"GH\"\n    | \"KE\"\n    | \"NG\"\n    | \"UG\"\n    | \"RW\"\n    | \"CM\"\n    | \"SN\"\n    | \"TZ\"\n    | \"CI\"\n    | \"MG\"\n    | \"ZM\"\n    | \"ZW\"\n    | \"MW\"\n    | \"LS\"\n    | \"SZ\"\n    | \"KM\"\n    | \"DJ\"\n    | \"RE\"\n    | \"YT\"\n    | \"WF\"\n    | \"NU\"\n    | \"TK\"\n    | \"FM\"\n    | \"MH\"\n    | \"SA\"\n    | \"RU\";\n  phoneInput?: string;\n  onsuccess?: Function;\n  invalid?: Function;\n  message?: string;\n  isLandlineNumber?: Function;\n  isMobileNumber?: Function;\n}\n\ninterface ValidateEmailObj {\n  when?: \"onblur\" | \"typing\";\n  message?: string;\n  onsuccess?: Function;\n  invalid?: Function;\n  emailInput?: string;\n  type?:\n    | \"personal\"\n    | \"business\"\n    | \"yahoo\"\n    | \"gmail\"\n    | \"hotmail\"\n    | \"aol\"\n    | \"isp\"\n    | \"education\"\n    | \"government\"\n    | \"nonprofit\"\n    | \"international\"\n    | \"domain-specific\"\n    | \"alias\";\n}\n\ninterface ValidateNumberObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  min?: number;\n  max?: number;\n  decimalPlaces?: number;\n  allowNegative?: boolean;\n  integersOnly?: boolean;\n  base?: number;\n  customErrorMessages?: {\n    [key: string]: string;\n  };\n  onsuccess?: Function;\n  invalid?: Function;\n}\ninterface ValidateIntegerObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  minValue?: number;\n  maxValue?: number;\n  uniqueValues?: number[];\n  positiveOnly?: boolean;\n  evenOnly?: boolean;\n  divisibleBy?: number;\n  invalid?: Function;\n  customErrorMessages?: {\n    notANumber?: string;\n    notAnInteger?: string;\n    outOfRange?: string;\n    notUnique?: string;\n    notPositive?: string;\n    notEven?: string;\n    notDivisible?: string;\n  };\n}\n\ninterface ValidateFloatObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  invalid?: string;\n  required?: boolean;\n  min?: number;\n  max?: number;\n  precision?: number;\n  customErrorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n    precision?: string;\n  };\n}\ninterface ValidateDateObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string | Date;\n  minDate?: Date;\n  maxDate?: Date;\n  allowOnlyBusinessDay?: boolean;\n  allowOnlyWeekend?: boolean;\n  customFormat?: string;\n  timeZone?: string;\n  customErrorMessages?: {\n    invalidDate?: string;\n    minDate?: string;\n    maxDate?: string;\n    businessDay?: string;\n    notWeekend?: string;\n    invalidFormat?: string;\n    invalidTimeZone?: string;\n  };\n}\n\ninterface TimeRange {\n  startTime?: string;\n  endTime?: string;\n}\n\ninterface TimeInterval {\n  startInterval?: number;\n  endInterval?: number;\n}\n\ninterface Timezone {\n  name?: string;\n  offset?: number;\n}\ninterface ValidateTimeObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  timezone?: Timezone;\n  timeRange?: TimeRange;\n  timeInterval?: TimeInterval;\n  customErrorMessages?: {\n    invalidFormat?: string;\n    invalidRange?: string;\n    invalidTimezone?: string;\n    invalidInterval?: string;\n  };\n}\n\ninterface ValidateUrlObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  CustomErrorMessages?: {\n    invalidUrl?: string;\n    invalidProtocol?: string;\n    invalidDomain?: string;\n    invalidIpAddress?: string;\n    inaccessibleUrl?: string;\n    invalidCharacters?: string;\n  };\n  checkUrl?: boolean;\n  checkProtocol?: boolean;\n  checkDomain?: boolean;\n  checkIpAddress?: boolean;\n  checkAccessibleUrl?: boolean;\n  checkCharacters?: boolean;\n  protocols?: string[];\n}\ninterface ValidateCreditCardObj {\n  when?: \"onblur\" | \"typing\";\n  allowedCards?: string[];\n  cardNumber?: string;\n  expirationDate?: string;\n  cvv?: string;\n  billingZip?: string;\n  getCardType?: FunctionComponent;\n  customErrorMessages?: {\n    onlyAllowedCards?: string;\n    invalidCardNumber?: string;\n    invalidExpirationDate?: string;\n    invalidCVV?: string;\n    invalidBillingZip?: string;\n  };\n}\n\ninterface onSubmitFunction {\n  (event?: React.FormEvent<HTMLFormElement>): void;\n}\ninterface Rules {\n  validateRequired?: ValidateRequiredObj;\n  ValidateMinMax?: ValidateMinMaxObj;\n  ValidateEmail?: ValidateEmailObj;\n  ValidatePattern?: ValidatePatternObj;\n  ValidatePhone?: ValidatePhoneObj;\n  ValidateNumber?: ValidateNumberObj;\n  ValidateInteger?: ValidateIntegerObj;\n  ValidateFloat?: ValidateFloatObj;\n  ValidateDate?: ValidateDateObj;\n  ValidateTime?: ValidateTimeObj;\n  ValidateUrl?: ValidateUrlObj;\n  ValidateCreditCard?: ValidateCreditCardObj;\n}\n\ninterface Props {\n  children: React.ReactNode;\n  rules?: Rules;\n  errorElement?: string;\n  onSubmit?: onSubmitFunction;\n}\n\ninterface ValidateForm {\n  props: Props;\n}\n\ninterface CountryCodeRegexMap {\n  [countryCode: string]: RegExp;\n}\n\nconst countryCodeRegexMap: CountryCodeRegexMap = {\n  US: /^(\\+?1)?[2-9]\\d{9}$/,\n  CA: /^(\\+?1)?[2-9]\\d{9}$/,\n  MX: /^(\\+?52)?(1)?\\d{10}$/,\n  GB: /^(\\+?44|0)7\\d{9}$/,\n  FR: /^(\\+?33|0)[67]\\d{8}$/,\n  DE: /^(\\+49|0)[1-9]\\d{10}$/,\n  JP: /^(\\+?81|0)\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{4}$/,\n  AU: /^(\\+?61|0)[45789]\\d{8}$/,\n  NZ: /^(\\+?64|0)[28]\\d{7,9}$/,\n  IN: /^(\\+?91|0)?[6789]\\d{9}$/,\n  CN: /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  HK: /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\n  SG: /^(\\+65)?[89]\\d{7}$/,\n  TW: /^(\\+?886\\-?|0)?9\\d{8}$/,\n  KR: /^(\\+?82|0)?1[0-9]{1,2}-?[0-9]{3,4}-?[0-9]{4}$/,\n  TH: /^(\\+66|66|0)\\d{8}$/,\n  PH: /^(\\+?63|0)?[89]\\d{9}$/,\n  VN: /^(\\+?84|0)?[1-9]\\d{8}$/,\n  MY: /^(\\+?6?01){1}(([145]{1}(-|\\s)?\\d{7,8})|([236789]{1}(\\s|-)?\\d{7}))$/,\n  BE: /^(\\+?32|0)4?\\d{8}$/,\n  NL: /^(\\+?31|0)6?\\d{8}$/,\n  IT: /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  ES: /^(\\+?34)?[-. ]?6\\d{8}$/,\n  PT: /^(\\+351)?9[1236]\\d{7}$/,\n  AT: /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  CH: /^(\\+41|0)([1-9])\\d{1,12}$/,\n  SE: /^(\\+?46|0)7\\d{8}$/,\n  NO: /^(\\+?47)?[49]\\d{7}$/,\n  DK: /^(\\+?45)?(\\d{8})$/,\n  FI: /^(\\+?358|0)\\s?(4(0|1|2|4|5)|50|4(6|7)|[5-7]|9\\d)\\s?\\d{6,7}$/,\n  BR: /^(\\+?55|0)?([1-9]{2})?([6-9]{1})(\\d{8})$/,\n  AR: /^(\\+?54|0)?([1-9])?([1-9])(\\d{7,8})$/,\n  CO: /^(\\+?57|0)?([1-8]{1})?([2-4]{1})(\\d{7})$/,\n  PE: /^(\\+?51|0)?([1-9]{2})?([1-9]{1})(\\d{7})$/,\n  CL: /^(\\+?56|0)?([2-9]{1})?([2-9])(\\d{6,7})$/,\n  VE: /^(\\+?58|0)?([4]{1})(1|2|4|6)(\\d{7})$/,\n  CR: /^(\\+?506)?([2-8]{1})(\\d{7})$/,\n  PA: /^(\\+?507)?([2-8]{1})(\\d{7})$/,\n  DO: /^(\\+?1|0)?([8]{1})(0|1)(\\d{7})$/,\n  GT: /^(\\+?502)?([23]{1})(\\d{7})$/,\n  EC: /^(\\+?593|0)([679]{1})(\\d{7})$/,\n  UY: /^(\\+?598|0)([4]{1}[2-9]{1}|[5-9]{1})(\\d{6})$/,\n  PY: /^(\\+?595|0)([9]{1})([1-9]{1})(\\d{6})$/,\n  BO: /^(\\+?591)?([267]{1})(\\d{7})$/,\n  HN: /^(\\+?504)?([239]{1})(\\d{7})$/,\n  NI: /^(\\+?505)?([5689]{1})(\\d{7})$/,\n  SV: /^(\\+?503)?([67]{1})(\\d{7})$/,\n  PR: /^(\\+?1)?([0]{1}[78]{1}|[2367]{1})(\\d{7})$/,\n  JM: /^(\\+?1)?([8]{1}[79]{1}|[45]{1}[67]{1})(\\d{7})$/,\n  BB: /^(\\+?1)?([246]{1})(\\d{7})$/,\n  KY: /^(\\+?1)?([345]{1}([01]{1}|[69]{1})|[24]{1}([26]{1}|[46]{1})|[78]{1}([4]{1}|[5]{1}|[7]{1}|[9]{1}))(\\d{6})$/,\n  VG: /^(\\+?1)?([284]{1})(\\d{7})$/,\n  TT: /^(\\+?1)?([868]{1})(\\d{7})$/,\n  DM: /^(\\+?1)?([767]{1})(\\d{7})$/,\n  GD: /^(\\+?1)?([473]{1})(\\d{7})$/,\n  GH: /^(\\+?233|0)?([23]0|[57][0567]|6[679]|8[124567])(\\d{7})$/,\n  KE: /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/,\n  NG: /^(\\+?234|0)?[789]\\d{9}$/,\n  UG: /^(\\+?256|0)?([39]0|[47][057]|[568][056]|[7-9][089])(\\d{7})$/,\n  RW: /^(\\+?250|0)?[7]\\d{8}$/,\n  CM: /^(\\+?237|0)?(6[57]|2[2368]|3[89]|4[6-8]|[78]0|\\d{2})(\\d{6,7})$/,\n  SN: /^(\\+?221|0)?[76][05](\\d{7}|\\d{8})$/,\n  TZ: /^(\\+?255|0)?[67]\\d{8}$/,\n  CI: /^(\\+?225|0)?[017]\\d{7}$/,\n  MG: /^(\\+?261|0)?[2368]\\d{7}$/,\n  ZM: /^(\\+?26[01]|0)?[567]\\d{8}$/,\n  ZW: /^(\\+?263|0)?[17]\\d{8}$/,\n  MW: /^(\\+?265|0)?[11768]\\d{7}$/,\n  LS: /^(\\+?266|0)?[5-8]\\d{7}$/,\n  SZ: /^(\\+?268|0)?[7]\\d{7}$/,\n  KM: /^(\\+?269|0)?[269]\\d{7}$/,\n  DJ: /^(\\+?253|0)?[77-9](\\d{6})$/,\n  RE: /^(\\+?262|0)?[269]\\d{8}$/,\n  YT: /^(\\+?262|0)?[639]\\d{8}$/,\n  WF: /^(\\+?681|0)?\\d{6}$/,\n  NU: /^(\\+?683|0)?\\d{4}$/,\n  TK: /^(\\+?690|0)?\\d{4}$/,\n  FM: /^(\\+?691|0)?[1-9]\\d{3}$/,\n  MH: /^(\\+?692|0)?\\d{7}$/,\n  SA: /^(\\+?966|0)?5[0-9]{8}$/,\n  RU: /^(\\+?7|8)?9\\d{9}$/,\n};\n\nclass ValidateForm extends React.Component<Props> {\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.rules !== prevProps.rules) {\n      this.init();\n    }\n  }\n\n  init() {\n    let { rules, onSubmit, errorElement } = this.props;\n    let wrapper = document.getElementById(\"_validation_wrapper\");\n    let form = wrapper?.children[0] as HTMLFormElement;\n    let submit_button =\n      (form.querySelector('button[type=\"submit\"]') as HTMLFormElement) ||\n      (form.querySelector('input[type=\"submit\"]') as HTMLFormElement);\n    let errorText = document.querySelector(errorElement!) as HTMLElement;\n    let errorMessage = String;\n    let isInputRedBorder = false;\n\n    form.querySelectorAll(\"input\").forEach((input, index) => {\n      if (input.style.transition === \"\") {\n        input.style.transition = \"0.3s ease\";\n        input.style.transitionDelay = \"0.\" + (index - 1) + \"s\";\n      }\n    });\n\n    if (submit_button) {\n      form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n\n        if (errorText.innerHTML === \"\" && !isInputRedBorder) {\n          if (onSubmit) {\n            onSubmit();\n          } else {\n            form.submit();\n          }\n        }\n      });\n    }\n\n    const setErrorText = (message: string) => {\n      if (errorText) {\n        errorText.innerText = message;\n      }\n    };\n\n    const runValidateRequired = () => {\n      // Check If All Required Feilds Filled\n\n      form.addEventListener(\"input\", (event) => {\n        const input = event.target as HTMLInputElement;\n\n        input.style.borderColor = \"\";\n        isInputRedBorder = false;\n      });\n\n      const submit_button =\n        form?.querySelector<HTMLInputElement>('button[type=\"submit\"]') ||\n        form?.querySelector<HTMLInputElement>('input[type=\"submit\"]');\n\n      submit_button?.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n\n        let requiredInputs: HTMLInputElement[] = [];\n\n        if (rules?.validateRequired?.applyOnly) {\n          rules?.validateRequired?.applyOnly.forEach((inputName: String) => {\n            requiredInputs.push(\n              form?.querySelector<HTMLInputElement>(\n                `[name=\"${inputName}\"]`\n              ) as HTMLInputElement\n            );\n          });\n        } else {\n          form\n            ?.querySelectorAll<HTMLInputElement>(\"input[required]\")\n            .forEach((input) => {\n              requiredInputs.push(input);\n            });\n        }\n\n        const missingInputs: HTMLInputElement[] = [];\n\n        requiredInputs?.forEach((input) => {\n          if (!input.value) {\n            missingInputs.push(input);\n          }\n        });\n\n        if (missingInputs.length > 0) {\n          missingInputs.forEach((input, index) => {\n            if (rules?.validateRequired?.notvalidated) {\n              rules?.validateRequired?.notvalidated(missingInputs);\n            }\n            if (index === 0) {\n              input.focus();\n            }\n            if (rules?.validateRequired?.action === \"input_red_border\") {\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n                isInputRedBorder = true;\n              } else {\n                input.style.border = \"1px solid red\";\n                isInputRedBorder = true;\n              }\n            } else if (\n              rules?.validateRequired?.action === \"show_error_message\"\n            ) {\n              if (rules?.validateRequired.message) {\n                setErrorText(rules?.validateRequired.message);\n              }\n            } else if (rules?.validateRequired?.action === \"both\") {\n              if (rules?.validateRequired?.message) {\n                setErrorText(rules?.validateRequired?.message);\n              }\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n                isInputRedBorder = true;\n              } else {\n                input.style.border = \"1px solid red\";\n                isInputRedBorder = true;\n              }\n            }\n          });\n        } else {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (rules?.validateRequired?.onsuccess) {\n            rules?.validateRequired?.onsuccess();\n          }\n        }\n      });\n    };\n\n    const runValidateMinMax = () => {\n      const inputs = form.querySelectorAll(\"input[min][max]\");\n\n      if (rules?.ValidateMinMax?.when === \"typing\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"input\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!!);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      } else if (rules?.ValidateMinMax?.when === \"onblur\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"blur\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    };\n\n    const runValidateEmail = () => {\n      let emailPattern: RegExp;\n      let type = rules?.ValidateEmail?.type;\n      let emailInput = form.querySelector(\n        `input[name=\"${rules?.ValidateEmail?.emailInput}\"]`\n      ) as HTMLInputElement;\n      let message = rules?.ValidateEmail?.message;\n      let onsuccess = rules?.ValidateEmail?.onsuccess;\n      let invalid = rules?.ValidateEmail?.invalid;\n      let when = rules?.ValidateEmail?.when || \"typing\";\n\n      switch (type) {\n        case \"personal\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"business\":\n          emailPattern =\n            /^(?!.*@(?:gmail|yahoo|hotmail|outlook)\\.com$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n          break;\n        case \"yahoo\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@yahoo\\.com$/;\n          break;\n        case \"gmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n          break;\n        case \"hotmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(hotmail|outlook)\\.com$/;\n          break;\n        case \"aol\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@aol\\.com$/;\n          break;\n        case \"isp\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(comcast|verizon|att)\\.com$/;\n          break;\n        case \"education\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(edu)$/;\n          break;\n        case \"government\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(gov)$/;\n          break;\n        case \"nonprofit\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(org)$/;\n          break;\n        case \"international\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}$/;\n          break;\n        case \"domain-specific\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@(support|sales|info)\\.[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"alias\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        default:\n          return false;\n      }\n\n      if (when === \"onblur\") {\n        emailInput.addEventListener(\"blur\", () => {\n          let email = emailInput.value;\n\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              emailInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              emailInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        emailInput.addEventListener(\"input\", () => {\n          let email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              emailInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              emailInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePattern = () => {\n      let inputElement = form.querySelector(\n        `input[name=\"${rules?.ValidatePattern?.input}\"]`\n      ) as HTMLInputElement;\n      let options = rules?.ValidatePattern;\n\n      if (options?.when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      } else if (options?.when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePhone = () => {\n      let phoneInput = form.querySelector(\n        `input[name=\"${rules?.ValidatePhone?.phoneInput}\"]`\n      ) as HTMLInputElement;\n      let countryCode = rules?.ValidatePhone?.countryCode;\n      let when = rules?.ValidatePhone?.when;\n      let onsuccess = rules?.ValidatePhone?.onsuccess;\n      let invalid = rules?.ValidatePhone?.invalid;\n      let message = rules?.ValidatePhone?.message;\n\n      const mobileRegex =\n        /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/;\n      const landlineRegex = /^(\\+?254|0)?([2-69][0-9]{6,7})$/;\n\n      if (when === \"onblur\") {\n        phoneInput.addEventListener(\"blur\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              phoneInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              phoneInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules?.ValidatePhone?.isLandlineNumber) {\n            rules?.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules?.ValidatePhone?.isMobileNumber) {\n            rules?.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      } else if (when === \"typing\") {\n        phoneInput.addEventListener(\"input\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              phoneInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules?.ValidatePhone?.isLandlineNumber) {\n            rules?.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules?.ValidatePhone?.isMobileNumber) {\n            rules?.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      }\n    };\n\n    const runValidateNumber = () => {\n      let min = rules?.ValidateNumber?.min;\n      let max = rules?.ValidateNumber?.max;\n      let inputName = rules?.ValidateNumber?.input;\n      let when = rules?.ValidateNumber?.when;\n      let decimalPlaces = rules?.ValidateNumber?.decimalPlaces;\n      let allowNegative = rules?.ValidateNumber?.allowNegative;\n      let integersOnly = rules?.ValidateNumber?.integersOnly;\n      let base = rules?.ValidateNumber?.base;\n      let customErrorMessages = rules?.ValidateNumber?.customErrorMessages;\n      let inputElement = form.querySelector(\n        `input[name='${inputName}']`\n      ) as HTMLInputElement;\n      let errorMessage: string | undefined;\n      let onsuccess = rules?.ValidateNumber?.onsuccess;\n      let invalid = rules?.ValidateNumber?.invalid;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          errorMessage = undefined;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage === undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          errorMessage = undefined;\n\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage == undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateInteger = () => {\n      let when = rules?.ValidateInteger?.when;\n      let input = rules?.ValidateInteger?.input;\n      let minValue = rules?.ValidateInteger?.minValue;\n      let maxValue = rules?.ValidateInteger?.maxValue;\n      let uniqueValues = rules?.ValidateInteger?.uniqueValues;\n      let positiveOnly = rules?.ValidateInteger?.positiveOnly;\n      let evenOnly = rules?.ValidateInteger?.evenOnly;\n      let divisibleBy = rules?.ValidateInteger?.divisibleBy;\n      let invalid = rules?.ValidateInteger?.invalid;\n      let customErrorMessages = rules?.ValidateInteger?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const errorMessage = {\n            ...customErrorMessages,\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const errorMessage = {\n            ...customErrorMessages,\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateFloat = () => {\n      let when = rules?.ValidateFloat?.when;\n      let input = rules?.ValidateFloat?.input;\n      let customErrorMessages = rules?.ValidateFloat?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        required: \"This field is required\",\n        invalid: \"Please enter a valid number\",\n        min: `Please enter a number greater than or equal to ${rules?.ValidateFloat?.min}`,\n        max: `Please enter a number less than or equal to ${rules?.ValidateFloat?.max}`,\n        precision: `Please enter a number with at most ${rules?.ValidateFloat?.precision} decimal places`,\n        ...customErrorMessages,\n      };\n      const errorMessages = defaultErrorMessages;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let value = inputElement.value;\n\n          const isEmpty = !value.trim();\n          if (rules?.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.min !== undefined &&\n            numberValue < rules?.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.max !== undefined &&\n            numberValue > rules?.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules?.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules?.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const isEmpty = !value.trim();\n          if (rules?.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.min !== undefined &&\n            numberValue < rules?.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.max !== undefined &&\n            numberValue > rules?.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules?.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules?.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateDate = () => {\n      let when = rules?.ValidateDate?.when;\n      let inputValue = rules?.ValidateDate?.input;\n      let minDate = rules?.ValidateDate?.minDate;\n      let maxDate = rules?.ValidateDate?.maxDate;\n      let allowOnlyBusinessDay = rules?.ValidateDate?.allowOnlyBusinessDay;\n      let allowOnlyWeekend = rules?.ValidateDate?.allowOnlyWeekend;\n      let customFormat = rules?.ValidateDate?.customFormat;\n      let timeZone = rules?.ValidateDate?.timeZone;\n      let customErrorMessages = rules?.ValidateDate?.customErrorMessages;\n      let inputElement = form.querySelector(\n        `input[name=\"${inputValue}\"]`\n      ) as HTMLInputElement;\n\n      function isBusinessDayCheck(date: Date): boolean {\n        // assuming weekends are Saturday (6) and Sunday (0)\n        const dayOfWeek = date.getDay();\n        return dayOfWeek !== 0 && dayOfWeek !== 6;\n      }\n\n      function isWeekendCheck(date: Date): boolean {\n        const dayOfWeek = date.getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6;\n      }\n\n      const defaultErrorMessages = {\n        invalidDate: \"Invalid date format\",\n        minDate: `The date must be on or after ${rules?.ValidateDate?.minDate?.toLocaleDateString()}`,\n        maxDate: `The date must be on or before ${rules?.ValidateDate?.maxDate?.toLocaleDateString()}`,\n        businessDay: \"Date is not a business day\",\n        notWeekend: \"Date is not a weekend\",\n        invalidFormat: \"Date is not in the expected format\",\n        invalidTimeZone: \"Time zone is not valid\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let input = inputElement.value;\n          const inputDate = new Date(input);\n\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate!;\n              }\n            }\n          }\n\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate!;\n              }\n            }\n          }\n\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate!;\n              }\n            }\n          }\n\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay!;\n              }\n            }\n          }\n\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend!;\n              }\n            }\n          }\n\n          if (timeZone) {\n            try {\n              const formatter = new Intl.DateTimeFormat(\"en-US\", {\n                timeZone,\n                ...(customFormat && { dateStyle: \"short\", timeStyle: \"short\" }),\n              });\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let input = inputElement.value;\n          const inputDate = new Date(input);\n\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate!;\n              }\n            }\n          }\n\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate!;\n              }\n            }\n          }\n\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate!;\n              }\n            }\n          }\n\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay!;\n              }\n            }\n          }\n\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend!;\n              }\n            }\n          }\n\n          if (timeZone) {\n            try {\n              const formatter = new Intl.DateTimeFormat(\"en-US\", {\n                timeZone,\n                ...(customFormat && { dateStyle: \"short\", timeStyle: \"short\" }),\n              });\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateTime = () => {\n      const when = rules?.ValidateTime?.when;\n      const input = rules?.ValidateTime?.input;\n      const customErrorMessages = rules?.ValidateTime?.customErrorMessages;\n      const timeRange = rules?.ValidateTime?.timeRange;\n      const timeInterval = rules?.ValidateTime?.timeInterval;\n      const timezone = rules?.ValidateTime?.timezone;\n\n      const defaultErrorMessages = {\n        invalidFormat: \"Invalid time format\",\n        invalidRange: \"Time is out of range\",\n        invalidTimezone: \"Invalid timezone\",\n        invalidInterval: \"Time is not within the specified interval\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      const inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let timeString = inputElement.value;\n\n          // Helper function to pad a number with leading zeros\n          function pad(num: number): string {\n            const str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n\n          // Check for valid time format\n          if (\n            !timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat!;\n              }\n            }\n          }\n\n          // Check for valid time range\n          const timeParts = timeString\n            .split(\":\")\n            .map((part) => parseInt(part, 10));\n          const hours = timeParts[0];\n          const minutes = timeParts[1];\n          const seconds = timeParts[2] || 0;\n          if (\n            hours < 0 ||\n            hours > 23 ||\n            minutes < 0 ||\n            minutes > 59 ||\n            seconds < 0 ||\n            seconds > 59\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange!;\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            const startTime = new Date(`2022-01-01T${timeRange.startTime}`);\n            const endTime = new Date(`2022-01-01T${timeRange.endTime}`);\n            const time = new Date(`2022-01-01T${timeString}`);\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText =\n                    \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            const timeParts = timeString\n              .split(\":\")\n              .map((part) => parseInt(part, 10));\n            const totalMinutes = timeParts[0] * 60 + timeParts[1];\n            if (\n              totalMinutes < timeInterval.startInterval! ||\n              totalMinutes > timeInterval.endInterval!\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let timeString = inputElement.value;\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          // Helper function to pad a number with leading zeros\n          function pad(num: number): string {\n            const str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n\n          // Check for valid time format\n          if (\n            !timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat!;\n              }\n            }\n          }\n\n          // Check for valid time range\n          const timeParts = timeString\n            .split(\":\")\n            .map((part) => parseInt(part, 10));\n          const hours = timeParts[0];\n          const minutes = timeParts[1];\n          const seconds = timeParts[2] || 0;\n          if (\n            hours < 0 ||\n            hours > 23 ||\n            minutes < 0 ||\n            minutes > 59 ||\n            seconds < 0 ||\n            seconds > 59\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange!;\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            const startTime = new Date(`2022-01-01T${timeRange.startTime}`);\n            const endTime = new Date(`2022-01-01T${timeRange.endTime}`);\n            const time = new Date(`2022-01-01T${timeString}`);\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText =\n                    \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            const timeParts = timeString\n              .split(\":\")\n              .map((part) => parseInt(part, 10));\n            const totalMinutes = timeParts[0] * 60 + timeParts[1];\n            if (\n              totalMinutes < timeInterval.startInterval! ||\n              totalMinutes > timeInterval.endInterval!\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateUrl = () => {\n      const when = rules?.ValidateUrl?.when;\n      const input = rules?.ValidateUrl?.input;\n      const customErrorMessages = rules?.ValidateUrl?.CustomErrorMessages;\n      const checkUrl = rules?.ValidateUrl?.checkUrl;\n      const checkProtocol = rules?.ValidateUrl?.checkProtocol;\n      const checkDomain = rules?.ValidateUrl?.checkDomain;\n      const checkIpAddress = rules?.ValidateUrl?.checkIpAddress;\n      const checkInAccessibleUrl = rules?.ValidateUrl?.checkAccessibleUrl;\n      const checkCharacters = rules?.ValidateUrl?.checkCharacters;\n      const protocols = rules?.ValidateUrl?.protocols;\n\n      const inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        invalidUrl: \"The URL is not well-formed\",\n        invalidProtocol: \"The URL has an invalid protocol\",\n        invalidDomain: \"The URL has an invalid domain name\",\n        invalidIpAddress: \"The URL has an invalid IP address\",\n        inaccessibleUrl: \"The URL is inaccessible\",\n        invalidCharacters: \"The URL contains invalid characters\",\n        protocolNotAllowed: `The URL must use the ${protocols} protocol`,\n      };\n      const errorMessages = { ...customErrorMessages, ...defaultErrorMessages };\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let url = inputElement.value;\n\n          const urlRegex =\n            /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          try {\n            const parsedUrl = new URL(url);\n\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed!;\n                  }\n                }\n              }\n            }\n\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol!;\n                  }\n                }\n              }\n            }\n\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain!;\n                  }\n                }\n              }\n            }\n\n            if (checkIpAddress) {\n              if (\n                parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)\n              ) {\n                const octets = parsedUrl.hostname.split(\".\");\n                if (octets.some((octet) => parseInt(octet) > 255)) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress!;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (checkInAccessibleUrl) {\n              fetch(url).then((response) => {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl!;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let url = inputElement.value;\n\n          const urlRegex =\n            /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          try {\n            const parsedUrl = new URL(url);\n\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed!;\n                  }\n                }\n              }\n            }\n\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol!;\n                  }\n                }\n              }\n            }\n\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain!;\n                  }\n                }\n              }\n            }\n\n            if (checkIpAddress) {\n              if (\n                parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)\n              ) {\n                const octets = parsedUrl.hostname.split(\".\");\n                if (octets.some((octet) => parseInt(octet) > 255)) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress!;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (checkInAccessibleUrl) {\n              fetch(url).then((response) => {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl!;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateCreditCard = () => {\n      const when = rules?.ValidateCreditCard?.when;\n      const allowedCards = rules?.ValidateCreditCard?.allowedCards;\n      const cardNumberValue = rules?.ValidateCreditCard?.cardNumber;\n      const expirationDateValue = rules?.ValidateCreditCard?.expirationDate;\n      const cvvValue = rules?.ValidateCreditCard?.cvv;\n      const billingZipValue = rules?.ValidateCreditCard?.billingZip;\n      const customErrorMessages =\n        rules?.ValidateCreditCard?.customErrorMessages;\n      const getCardType = rules?.ValidateCreditCard?.getCardType;\n\n      let cardNumberElement = form.querySelector(\n        `input[name=\"${cardNumberValue}\"]`\n      ) as HTMLInputElement;\n      let expirationDateElement = form.querySelector(\n        `input[name=\"${expirationDateValue}\"]`\n      ) as HTMLInputElement;\n      let cvvElement = form.querySelector(\n        `input[name=\"${cvvValue}\"]`\n      ) as HTMLInputElement;\n      let billingZipElement = form.querySelector(\n        `input[name=\"${billingZipValue}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        invalidCardNumber: \"Invalid credit card number\",\n        onlyAllowedCards: `Only ${allowedCards}  are allowed`,\n        invalidExpirationDate: \"Invalid expiration date\",\n        invalidCVV: \"Invalid CVV code\",\n        invalidBillingZip: \"Invalid billing zip code\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      function GetCardType(cardNumber: string): string {\n        // This function determines the card type based on the first digits of the card number\n        // You can implement your own logic to determine the card type\n        // Here's an example implementation that supports Visa, Mastercard, American Express, and Discover cards:\n        if (/^4/.test(cardNumber)) {\n          return \"Visa\";\n        } else if (/^5[1-5]/.test(cardNumber)) {\n          return \"Mastercard\";\n        } else if (/^3[47]/.test(cardNumber)) {\n          return \"American Express\";\n        } else if (/^6(?:011|5)/.test(cardNumber)) {\n          return \"Discover\";\n        } else {\n          return \"Unknown\";\n        }\n      }\n\n      function isValidCreditCardNumber(cardNumber: string): boolean {\n        // This function uses the Luhn algorithm to validate the credit card number\n        // You can find more information about the algorithm here: https://en.wikipedia.org/wiki/Luhn_algorithm\n        const strippedCardNumber = cardNumber.replace(/\\D/g, \"\");\n        let sum = 0;\n        let shouldDouble = false;\n        for (let i = strippedCardNumber.length - 1; i >= 0; i--) {\n          let digit = parseInt(strippedCardNumber.charAt(i), 10);\n          if (shouldDouble) {\n            if ((digit *= 2) > 9) digit -= 9;\n          }\n          sum += digit;\n          shouldDouble = !shouldDouble;\n        }\n        return sum % 10 === 0 && sum > 0;\n      }\n\n      function isValidCreditCardExpirationDate(\n        expirationDate: string\n      ): boolean {\n        // This function validates the expiration date of the credit card\n        // The expiration date should be in the format \"MM/YY\"\n        const currentDate = new Date();\n        const currentYear = currentDate.getFullYear();\n        const currentMonth = currentDate.getMonth() + 1;\n\n        const [expirationMonth, expirationYear] = expirationDate.split(\"/\");\n        const expMonth = parseInt(expirationMonth, 10);\n        const expYear = parseInt(expirationYear, 10) + 2000;\n\n        // Check that the expiration date is in the future\n        if (\n          expYear > currentYear ||\n          (expYear === currentYear && expMonth >= currentMonth)\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function isValidCreditCardCVV(cvv: string): boolean {\n        // This function validates the CVV code of the credit card\n        // You can implement your own validation logic based on your requirements\n        const strippedCVV = cvv.replace(/\\D/g, \"\");\n        return /^[0-9]{3,4}$/.test(strippedCVV);\n      }\n\n      function isValidCreditCardBillingZip(billingZip: string): boolean {\n        // This function validates the billing zip code of the credit card\n        // You can implement your own validation logic based on your requirements\n        const strippedBillingZip = billingZip.replace(/\\D/g, \"\");\n        return /^[0-9]{5}(?:-[0-9]{4})?$/.test(strippedBillingZip);\n      }\n\n      const checkCardNumber = (cardNumber: string) => {\n        // Validate the credit card number\n        const isValidCardNumber = isValidCreditCardNumber(cardNumber);\n        if (!isValidCardNumber) {\n          const errorMessage = errorMessages.invalidCardNumber;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkCardType = (cardNumber: string) => {\n        const cardType = GetCardType(cardNumber);\n        // Check if the card type is allowed\n        if (allowedCards) {\n          if (allowedCards.length > 0 && !allowedCards.includes(cardType)) {\n            const errorMessage = errorMessages.onlyAllowedCards;\n            return errorMessage;\n          } else {\n            return \"\";\n          }\n        }\n      };\n\n      const checkExpirationDate = (expirationDate: string) => {\n        // Validate the expiration date\n\n        const isValidExpirationDate =\n          isValidCreditCardExpirationDate(expirationDate);\n        if (!isValidExpirationDate) {\n          const errorMessage = errorMessages.invalidExpirationDate;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkCvv = (cvv: string) => {\n        // Validate the CVV code\n        const isValidCVV = isValidCreditCardCVV(cvv);\n        if (!isValidCVV) {\n          const errorMessage = errorMessages.invalidCVV;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkBillingZip = (billingZip: string) => {\n        // Validate the billing zip code\n        const isValidBillingZip = isValidCreditCardBillingZip(billingZip);\n        if (!isValidBillingZip) {\n          const errorMessage = errorMessages.invalidBillingZip;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      if (when === \"typing\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cardNumberElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value)!;\n                }\n              }\n            }\n\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              expirationDateElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n\n        if (cvvElement) {\n          cvvElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cvvElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              billingZipElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      } else if (when === \"onblur\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cardNumberElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value)!;\n                }\n              }\n            }\n\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              expirationDateElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n\n        if (cvvElement) {\n          cvvElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cvvElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              billingZipElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      }\n    };\n\n    if (rules) {\n      if (rules?.validateRequired) {\n        runValidateRequired();\n      } else if (rules?.ValidateMinMax) {\n        runValidateMinMax();\n      } else if (rules?.ValidateEmail) {\n        runValidateEmail();\n      } else if (rules?.ValidatePattern) {\n        runValidatePattern();\n      } else if (rules?.ValidatePhone) {\n        runValidatePhone();\n      } else if (rules?.ValidateNumber) {\n        runValidateNumber();\n      } else if (rules?.ValidateInteger) {\n        runValidateInteger();\n      } else if (rules?.ValidateFloat) {\n        runValidateFloat();\n      } else if (rules?.ValidateDate) {\n        runValidateDate();\n      } else if (rules?.ValidateTime) {\n        runValidateTime();\n      } else if (rules?.ValidateUrl) {\n        runValidateUrl();\n      } else if (rules?.ValidateCreditCard) {\n        runValidateCreditCard();\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"_validation_wrapper\">{this.props.children}</div>;\n  }\n}\n\nexport default ValidateForm;\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAMA,SAASC,YAAYA,CAACC,KAAY;EAEhC,OACEJ,OAAA,CAAAK,OAAA,CAAAC,aAAA;IAAKC,EAAE,EAAC;EAAqB,GAC1BH,KAAK,CAACI,QAAQ,CACX;AAEV;AAEAC,OAAA,CAAAJ,OAAA,GAAeF,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}