{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar react_1 = __importDefault(require(\"react\"));\nvar countryCodeRegexMap = {\n  US: /^(\\+?1)?[2-9]\\d{9}$/,\n  CA: /^(\\+?1)?[2-9]\\d{9}$/,\n  MX: /^(\\+?52)?(1)?\\d{10}$/,\n  GB: /^(\\+?44|0)7\\d{9}$/,\n  FR: /^(\\+?33|0)[67]\\d{8}$/,\n  DE: /^(\\+49|0)[1-9]\\d{10}$/,\n  JP: /^(\\+?81|0)\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{4}$/,\n  AU: /^(\\+?61|0)[45789]\\d{8}$/,\n  NZ: /^(\\+?64|0)[28]\\d{7,9}$/,\n  IN: /^(\\+?91|0)?[6789]\\d{9}$/,\n  CN: /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  HK: /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\n  SG: /^(\\+65)?[89]\\d{7}$/,\n  TW: /^(\\+?886\\-?|0)?9\\d{8}$/,\n  KR: /^(\\+?82|0)?1[0-9]{1,2}-?[0-9]{3,4}-?[0-9]{4}$/,\n  TH: /^(\\+66|66|0)\\d{8}$/,\n  PH: /^(\\+?63|0)?[89]\\d{9}$/,\n  VN: /^(\\+?84|0)?[1-9]\\d{8}$/,\n  MY: /^(\\+?6?01){1}(([145]{1}(-|\\s)?\\d{7,8})|([236789]{1}(\\s|-)?\\d{7}))$/,\n  BE: /^(\\+?32|0)4?\\d{8}$/,\n  NL: /^(\\+?31|0)6?\\d{8}$/,\n  IT: /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  ES: /^(\\+?34)?[-. ]?6\\d{8}$/,\n  PT: /^(\\+351)?9[1236]\\d{7}$/,\n  AT: /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  CH: /^(\\+41|0)([1-9])\\d{1,12}$/,\n  SE: /^(\\+?46|0)7\\d{8}$/,\n  NO: /^(\\+?47)?[49]\\d{7}$/,\n  DK: /^(\\+?45)?(\\d{8})$/,\n  FI: /^(\\+?358|0)\\s?(4(0|1|2|4|5)|50|4(6|7)|[5-7]|9\\d)\\s?\\d{6,7}$/,\n  BR: /^(\\+?55|0)?([1-9]{2})?([6-9]{1})(\\d{8})$/,\n  AR: /^(\\+?54|0)?([1-9])?([1-9])(\\d{7,8})$/,\n  CO: /^(\\+?57|0)?([1-8]{1})?([2-4]{1})(\\d{7})$/,\n  PE: /^(\\+?51|0)?([1-9]{2})?([1-9]{1})(\\d{7})$/,\n  CL: /^(\\+?56|0)?([2-9]{1})?([2-9])(\\d{6,7})$/,\n  VE: /^(\\+?58|0)?([4]{1})(1|2|4|6)(\\d{7})$/,\n  CR: /^(\\+?506)?([2-8]{1})(\\d{7})$/,\n  PA: /^(\\+?507)?([2-8]{1})(\\d{7})$/,\n  DO: /^(\\+?1|0)?([8]{1})(0|1)(\\d{7})$/,\n  GT: /^(\\+?502)?([23]{1})(\\d{7})$/,\n  EC: /^(\\+?593|0)([679]{1})(\\d{7})$/,\n  UY: /^(\\+?598|0)([4]{1}[2-9]{1}|[5-9]{1})(\\d{6})$/,\n  PY: /^(\\+?595|0)([9]{1})([1-9]{1})(\\d{6})$/,\n  BO: /^(\\+?591)?([267]{1})(\\d{7})$/,\n  HN: /^(\\+?504)?([239]{1})(\\d{7})$/,\n  NI: /^(\\+?505)?([5689]{1})(\\d{7})$/,\n  SV: /^(\\+?503)?([67]{1})(\\d{7})$/,\n  PR: /^(\\+?1)?([0]{1}[78]{1}|[2367]{1})(\\d{7})$/,\n  JM: /^(\\+?1)?([8]{1}[79]{1}|[45]{1}[67]{1})(\\d{7})$/,\n  BB: /^(\\+?1)?([246]{1})(\\d{7})$/,\n  KY: /^(\\+?1)?([345]{1}([01]{1}|[69]{1})|[24]{1}([26]{1}|[46]{1})|[78]{1}([4]{1}|[5]{1}|[7]{1}|[9]{1}))(\\d{6})$/,\n  VG: /^(\\+?1)?([284]{1})(\\d{7})$/,\n  TT: /^(\\+?1)?([868]{1})(\\d{7})$/,\n  DM: /^(\\+?1)?([767]{1})(\\d{7})$/,\n  GD: /^(\\+?1)?([473]{1})(\\d{7})$/,\n  GH: /^(\\+?233|0)?([23]0|[57][0567]|6[679]|8[124567])(\\d{7})$/,\n  KE: /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/,\n  NG: /^(\\+?234|0)?[789]\\d{9}$/,\n  UG: /^(\\+?256|0)?([39]0|[47][057]|[568][056]|[7-9][089])(\\d{7})$/,\n  RW: /^(\\+?250|0)?[7]\\d{8}$/,\n  CM: /^(\\+?237|0)?(6[57]|2[2368]|3[89]|4[6-8]|[78]0|\\d{2})(\\d{6,7})$/,\n  SN: /^(\\+?221|0)?[76][05](\\d{7}|\\d{8})$/,\n  TZ: /^(\\+?255|0)?[67]\\d{8}$/,\n  CI: /^(\\+?225|0)?[017]\\d{7}$/,\n  MG: /^(\\+?261|0)?[2368]\\d{7}$/,\n  ZM: /^(\\+?26[01]|0)?[567]\\d{8}$/,\n  ZW: /^(\\+?263|0)?[17]\\d{8}$/,\n  MW: /^(\\+?265|0)?[11768]\\d{7}$/,\n  LS: /^(\\+?266|0)?[5-8]\\d{7}$/,\n  SZ: /^(\\+?268|0)?[7]\\d{7}$/,\n  KM: /^(\\+?269|0)?[269]\\d{7}$/,\n  DJ: /^(\\+?253|0)?[77-9](\\d{6})$/,\n  RE: /^(\\+?262|0)?[269]\\d{8}$/,\n  YT: /^(\\+?262|0)?[639]\\d{8}$/,\n  WF: /^(\\+?681|0)?\\d{6}$/,\n  NU: /^(\\+?683|0)?\\d{4}$/,\n  TK: /^(\\+?690|0)?\\d{4}$/,\n  FM: /^(\\+?691|0)?[1-9]\\d{3}$/,\n  MH: /^(\\+?692|0)?\\d{7}$/,\n  SA: /^(\\+?966|0)?5[0-9]{8}$/,\n  RU: /^(\\+?7|8)?9\\d{9}$/\n};\nvar ValidateForm = /** @class */function (_super) {\n  __extends(ValidateForm, _super);\n  function ValidateForm() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ValidateForm.prototype.componentDidMount = function () {\n    this.init();\n  };\n  ValidateForm.prototype.componentDidUpdate = function (prevProps) {\n    if (this.props.rules !== prevProps.rules) {\n      this.init();\n    }\n  };\n  ValidateForm.prototype.init = function () {\n    var _a = this.props,\n      rules = _a.rules,\n      onSubmit = _a.onSubmit;\n    var errorElement = this.props.errorElement;\n    var allowedKeys = [\"validateRequired\", \"ValidateMinMax\", \"ValidateEmail\", \"ValidatePattern\", \"ValidatePhone\", \"ValidateNumber\", \"ValidateInteger\", \"ValidateFloat\", \"ValidateDate\", \"ValidateTime\", \"ValidateUrl\", \"ValidateCreditCard\"];\n    var wrapper = document.getElementById(\"_validation_wrapper\");\n    var form = wrapper === null || wrapper === void 0 ? void 0 : wrapper.children[0];\n    var submit_button = form.querySelector('button[type=\"submit\"]') || form.querySelector('input[type=\"submit\"]');\n    var errorText = document.querySelector(errorElement);\n    var errorMessage = String;\n    form.querySelectorAll(\"input\").forEach(function (input, index) {\n      if (input.style.transition === \"\") {\n        input.style.transition = \"0.3s ease\";\n        input.style.transitionDelay = \"0.\" + (index - 1) + \"s\";\n      }\n    });\n    if (submit_button) {\n      form.addEventListener(\"submit\", function (e) {\n        e.preventDefault();\n        if (errorText.innerHTML === \"\") {\n          if (onSubmit) {\n            onSubmit(e);\n          } else {\n            form.submit();\n          }\n        }\n      });\n    }\n    var setErrorText = function (message) {\n      if (errorText) {\n        errorText.innerText = message;\n      }\n    };\n    var runValidateRequired = function () {\n      // Check If All Required Feilds Filled\n      form.addEventListener(\"input\", function (event) {\n        var input = event.target;\n        input.style.borderColor = \"\";\n      });\n      var submit_button = (form === null || form === void 0 ? void 0 : form.querySelector('button[type=\"submit\"]')) || (form === null || form === void 0 ? void 0 : form.querySelector('input[type=\"submit\"]'));\n      submit_button === null || submit_button === void 0 ? void 0 : submit_button.addEventListener(\"click\", function (event) {\n        var _a, _b, _c, _d;\n        event.preventDefault();\n        var requiredInputs = [];\n        if ((_a = rules.validateRequired) === null || _a === void 0 ? void 0 : _a.applyOnly) {\n          (_b = rules.validateRequired) === null || _b === void 0 ? void 0 : _b.applyOnly.forEach(function (inputName) {\n            requiredInputs.push(form === null || form === void 0 ? void 0 : form.querySelector(\"[name=\\\"\".concat(inputName, \"\\\"]\")));\n          });\n        } else {\n          form === null || form === void 0 ? void 0 : form.querySelectorAll(\"input[required]\").forEach(function (input) {\n            requiredInputs.push(input);\n          });\n        }\n        var missingInputs = [];\n        requiredInputs === null || requiredInputs === void 0 ? void 0 : requiredInputs.forEach(function (input) {\n          if (!input.value) {\n            missingInputs.push(input);\n          }\n        });\n        if (missingInputs.length > 0) {\n          missingInputs.forEach(function (input, index) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if ((_a = rules.validateRequired) === null || _a === void 0 ? void 0 : _a.notvalidated) {\n              (_b = rules.validateRequired) === null || _b === void 0 ? void 0 : _b.notvalidated(missingInputs);\n            }\n            if (index === 0) {\n              input.focus();\n            }\n            if (((_c = rules.validateRequired) === null || _c === void 0 ? void 0 : _c.action) === \"input_red_border\") {\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            } else if (((_d = rules.validateRequired) === null || _d === void 0 ? void 0 : _d.action) === \"show_error_message\") {\n              if (rules.validateRequired.message) {\n                setErrorText(rules.validateRequired.message);\n              }\n            } else if (((_e = rules.validateRequired) === null || _e === void 0 ? void 0 : _e.action) === \"both\") {\n              if ((_f = rules.validateRequired) === null || _f === void 0 ? void 0 : _f.message) {\n                setErrorText((_g = rules.validateRequired) === null || _g === void 0 ? void 0 : _g.message);\n              }\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n              } else {\n                input.style.border = \"1px solid red\";\n              }\n            }\n          });\n        } else {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if ((_c = rules.validateRequired) === null || _c === void 0 ? void 0 : _c.onsuccess) {\n            (_d = rules.validateRequired) === null || _d === void 0 ? void 0 : _d.onsuccess();\n          }\n        }\n      });\n    };\n    var runValidateMinMax = function () {\n      var _a, _b;\n      var inputs = form.querySelectorAll(\"input[min][max]\");\n      if (((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.when) === \"typing\") {\n        inputs.forEach(function (input) {\n          input.addEventListener(\"input\", function (event) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\n            var input = event.target;\n            var min = input.min;\n            var max = input.max;\n            var value = input.value;\n            var type = input.type;\n            var inputMinMessage = input.getAttribute(\"data-min-message\");\n            var inputMaxMessage = input.getAttribute(\"data-max-message\");\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if ((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.exceedsMin) {\n                    (_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_c = rules.ValidateMinMax) === null || _c === void 0 ? void 0 : _c.message) {\n                      setErrorText((_d = rules.ValidateMinMax) === null || _d === void 0 ? void 0 : _d.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if ((_e = rules.ValidateMinMax) === null || _e === void 0 ? void 0 : _e.exceedsMax) {\n                    (_f = rules.ValidateMinMax) === null || _f === void 0 ? void 0 : _f.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_g = rules.ValidateMinMax) === null || _g === void 0 ? void 0 : _g.message) {\n                      setErrorText((_h = rules.ValidateMinMax) === null || _h === void 0 ? void 0 : _h.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_j = rules.ValidateMinMax) === null || _j === void 0 ? void 0 : _j.onsuccess) {\n                    (_k = rules.ValidateMinMax) === null || _k === void 0 ? void 0 : _k.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if ((_l = rules.ValidateMinMax) === null || _l === void 0 ? void 0 : _l.exceedsMin) {\n                    (_m = rules.ValidateMinMax) === null || _m === void 0 ? void 0 : _m.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_o = rules.ValidateMinMax) === null || _o === void 0 ? void 0 : _o.message) {\n                      setErrorText((_p = rules.ValidateMinMax) === null || _p === void 0 ? void 0 : _p.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if ((_q = rules.ValidateMinMax) === null || _q === void 0 ? void 0 : _q.exceedsMax) {\n                    (_r = rules.ValidateMinMax) === null || _r === void 0 ? void 0 : _r.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_s = rules.ValidateMinMax) === null || _s === void 0 ? void 0 : _s.message) {\n                      setErrorText((_t = rules.ValidateMinMax) === null || _t === void 0 ? void 0 : _t.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_u = rules.ValidateMinMax) === null || _u === void 0 ? void 0 : _u.onsuccess) {\n                    (_v = rules.ValidateMinMax) === null || _v === void 0 ? void 0 : _v.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      } else if (((_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.when) === \"onblur\") {\n        inputs.forEach(function (input) {\n          input.addEventListener(\"blur\", function (event) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;\n            var input = event.target;\n            var min = input.min;\n            var max = input.max;\n            var value = input.value;\n            var type = input.type;\n            var inputMinMessage = input.getAttribute(\"data-min-message\");\n            var inputMaxMessage = input.getAttribute(\"data-max-message\");\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if ((_a = rules.ValidateMinMax) === null || _a === void 0 ? void 0 : _a.exceedsMin) {\n                    (_b = rules.ValidateMinMax) === null || _b === void 0 ? void 0 : _b.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_c = rules.ValidateMinMax) === null || _c === void 0 ? void 0 : _c.message) {\n                      setErrorText((_d = rules.ValidateMinMax) === null || _d === void 0 ? void 0 : _d.message.min);\n                    }\n                  }\n                } else if (value > max) {\n                  if ((_e = rules.ValidateMinMax) === null || _e === void 0 ? void 0 : _e.exceedsMax) {\n                    (_f = rules.ValidateMinMax) === null || _f === void 0 ? void 0 : _f.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_g = rules.ValidateMinMax) === null || _g === void 0 ? void 0 : _g.message) {\n                      setErrorText((_h = rules.ValidateMinMax) === null || _h === void 0 ? void 0 : _h.message.max);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if ((_j = rules.ValidateMinMax) === null || _j === void 0 ? void 0 : _j.onsuccess) {\n                    (_k = rules.ValidateMinMax) === null || _k === void 0 ? void 0 : _k.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if ((_l = rules.ValidateMinMax) === null || _l === void 0 ? void 0 : _l.exceedsMin) {\n                    (_m = rules.ValidateMinMax) === null || _m === void 0 ? void 0 : _m.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if ((_o = rules.ValidateMinMax) === null || _o === void 0 ? void 0 : _o.message) {\n                      setErrorText((_p = rules.ValidateMinMax) === null || _p === void 0 ? void 0 : _p.message.min);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if ((_q = rules.ValidateMinMax) === null || _q === void 0 ? void 0 : _q.exceedsMax) {\n                    (_r = rules.ValidateMinMax) === null || _r === void 0 ? void 0 : _r.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                  } else {\n                    input.style.border = \"1px solid red\";\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if ((_s = rules.ValidateMinMax) === null || _s === void 0 ? void 0 : _s.message) {\n                      setErrorText((_t = rules.ValidateMinMax) === null || _t === void 0 ? void 0 : _t.message.max);\n                    }\n                  }\n                } else {\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  input.style.borderColor = \"\";\n                  if ((_u = rules.ValidateMinMax) === null || _u === void 0 ? void 0 : _u.onsuccess) {\n                    (_v = rules.ValidateMinMax) === null || _v === void 0 ? void 0 : _v.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    };\n    var runValidateEmail = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var emailPattern;\n      var type = (_a = rules.ValidateEmail) === null || _a === void 0 ? void 0 : _a.type;\n      var emailInput = form.querySelector(\"input[name=\\\"\".concat((_b = rules.ValidateEmail) === null || _b === void 0 ? void 0 : _b.emailInput, \"\\\"]\"));\n      var message = (_c = rules.ValidateEmail) === null || _c === void 0 ? void 0 : _c.message;\n      var onsuccess = (_d = rules.ValidateEmail) === null || _d === void 0 ? void 0 : _d.onsuccess;\n      var invalid = (_e = rules.ValidateEmail) === null || _e === void 0 ? void 0 : _e.invalid;\n      var when = (_f = rules.ValidateEmail) === null || _f === void 0 ? void 0 : _f.when;\n      switch (type) {\n        case \"personal\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"business\":\n          emailPattern = /^(?!.*@(?:gmail|yahoo|hotmail|outlook)\\.com$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n          break;\n        case \"yahoo\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@yahoo\\.com$/;\n          break;\n        case \"gmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n          break;\n        case \"hotmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(hotmail|outlook)\\.com$/;\n          break;\n        case \"aol\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@aol\\.com$/;\n          break;\n        case \"isp\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(comcast|verizon|att)\\.com$/;\n          break;\n        case \"education\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(edu)$/;\n          break;\n        case \"government\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(gov)$/;\n          break;\n        case \"nonprofit\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(org)$/;\n          break;\n        case \"international\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}$/;\n          break;\n        case \"domain-specific\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(support|sales|info)\\.[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"alias\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        default:\n          return false;\n      }\n      if (when === \"onblur\") {\n        emailInput.addEventListener(\"blur\", function () {\n          var email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        emailInput.addEventListener(\"input\", function () {\n          var email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n            } else {\n              emailInput.style.border = \"\";\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n            } else {\n              emailInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidatePattern = function () {\n      var _a;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat((_a = rules.ValidatePattern) === null || _a === void 0 ? void 0 : _a.input, \"\\\"]\"));\n      var options = rules.ValidatePattern;\n      if ((options === null || options === void 0 ? void 0 : options.when) === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var input = inputElement.value;\n          if ((options === null || options === void 0 ? void 0 : options.allowEmpty) && input.length === 0) {\n            return true;\n          }\n          var regex;\n          switch (options === null || options === void 0 ? void 0 : options.type) {\n            case \"regex\":\n              regex = new RegExp(options === null || options === void 0 ? void 0 : options.pattern, options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\"^\" + (options === null || options === void 0 ? void 0 : options.pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\").replace(/\\\\\\*/g, \".*\").replace(/\\\\\\?/g, \".\")) + \"$\", options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n          var isValid = regex.test(input);\n          if (isValid) {\n            if (options === null || options === void 0 ? void 0 : options.onsuccess) {\n              options === null || options === void 0 ? void 0 : options.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (options === null || options === void 0 ? void 0 : options.invalid) {\n              options === null || options === void 0 ? void 0 : options.invalid();\n            }\n            if (errorText) {\n              if (options === null || options === void 0 ? void 0 : options.errorMessage) {\n                errorText.innerText = options === null || options === void 0 ? void 0 : options.errorMessage;\n              }\n            }\n          }\n        });\n      } else if ((options === null || options === void 0 ? void 0 : options.when) === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var input = inputElement.value;\n          if ((options === null || options === void 0 ? void 0 : options.allowEmpty) && input.length === 0) {\n            return true;\n          }\n          var regex;\n          switch (options === null || options === void 0 ? void 0 : options.type) {\n            case \"regex\":\n              regex = new RegExp(options === null || options === void 0 ? void 0 : options.pattern, options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\"^\" + (options === null || options === void 0 ? void 0 : options.pattern.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\").replace(/\\\\\\*/g, \".*\").replace(/\\\\\\?/g, \".\")) + \"$\", options === null || options === void 0 ? void 0 : options.modifiers);\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n          var isValid = regex.test(input);\n          if (isValid) {\n            if (options === null || options === void 0 ? void 0 : options.onsuccess) {\n              options === null || options === void 0 ? void 0 : options.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (options === null || options === void 0 ? void 0 : options.invalid) {\n              options === null || options === void 0 ? void 0 : options.invalid();\n            }\n            if (errorText) {\n              if (options === null || options === void 0 ? void 0 : options.errorMessage) {\n                errorText.innerText = options === null || options === void 0 ? void 0 : options.errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidatePhone = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var phoneInput = form.querySelector(\"input[name=\\\"\".concat((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.phoneInput, \"\\\"]\"));\n      var countryCode = (_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.countryCode;\n      var when = (_c = rules.ValidatePhone) === null || _c === void 0 ? void 0 : _c.when;\n      var onsuccess = (_d = rules.ValidatePhone) === null || _d === void 0 ? void 0 : _d.onsuccess;\n      var invalid = (_e = rules.ValidatePhone) === null || _e === void 0 ? void 0 : _e.invalid;\n      var message = (_f = rules.ValidatePhone) === null || _f === void 0 ? void 0 : _f.message;\n      var mobileRegex = /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/;\n      var landlineRegex = /^(\\+?254|0)?([2-69][0-9]{6,7})$/;\n      if (when === \"onblur\") {\n        phoneInput.addEventListener(\"blur\", function () {\n          var _a, _b;\n          var phoneNumber = phoneInput.value;\n          var isValid = false;\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (var _i = 0, _c = Object.values(countryCodeRegexMap); _i < _c.length; _i++) {\n              var regex = _c[_i];\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"red\";\n            } else {\n              phoneInput.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n          if ((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(landlineRegex.test(phoneNumber));\n          }\n          if ((_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      } else if (when === \"typing\") {\n        phoneInput.addEventListener(\"input\", function () {\n          var _a, _b;\n          var phoneNumber = phoneInput.value;\n          var isValid = false;\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (var _i = 0, _c = Object.values(countryCodeRegexMap); _i < _c.length; _i++) {\n              var regex = _c[_i];\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n            } else {\n              phoneInput.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n          if ((_a = rules.ValidatePhone) === null || _a === void 0 ? void 0 : _a.isLandlineNumber) {\n            rules.ValidatePhone.isLandlineNumber(landlineRegex.test(phoneNumber));\n          }\n          if ((_b = rules.ValidatePhone) === null || _b === void 0 ? void 0 : _b.isMobileNumber) {\n            rules.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      }\n    };\n    var runValidateNumber = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n      var min = (_a = rules.ValidateNumber) === null || _a === void 0 ? void 0 : _a.min;\n      var max = (_b = rules.ValidateNumber) === null || _b === void 0 ? void 0 : _b.max;\n      var inputName = (_c = rules.ValidateNumber) === null || _c === void 0 ? void 0 : _c.input;\n      var when = (_d = rules.ValidateNumber) === null || _d === void 0 ? void 0 : _d.when;\n      var decimalPlaces = (_e = rules.ValidateNumber) === null || _e === void 0 ? void 0 : _e.decimalPlaces;\n      var allowNegative = (_f = rules.ValidateNumber) === null || _f === void 0 ? void 0 : _f.allowNegative;\n      var integersOnly = (_g = rules.ValidateNumber) === null || _g === void 0 ? void 0 : _g.integersOnly;\n      var base = (_h = rules.ValidateNumber) === null || _h === void 0 ? void 0 : _h.base;\n      var customErrorMessages = (_j = rules.ValidateNumber) === null || _j === void 0 ? void 0 : _j.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name='\".concat(inputName, \"']\"));\n      var errorMessage;\n      var onsuccess = (_k = rules.ValidateNumber) === null || _k === void 0 ? void 0 : _k.onsuccess;\n      var invalid = (_l = rules.ValidateNumber) === null || _l === void 0 ? void 0 : _l.invalid;\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          errorMessage = undefined;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          var input = inputElement.value;\n          var num = Number(input);\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage: (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.invalidNumber) || \"Invalid number\"\n            };\n          }\n          // Check if the number is within the specified range\n          if (min !== undefined && num < min || max !== undefined && num > max) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.range) || \"Number must be between \".concat(min, \" and \").concat(max);\n          }\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            var numStr = num.toString();\n            var decimalIndex = numStr.indexOf(\".\");\n            var numDecimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.decimalPlaces) || \"Number must have no more than \".concat(decimalPlaces, \" decimal places\");\n            }\n          }\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.negative) || \"Negative numbers are not allowed\";\n          }\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.integersOnly) || \"Only integers are allowed\";\n          }\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            var parsedNum = parseInt(input, base);\n            if (isNaN(parsedNum)) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.base) || \"Number must be in base \".concat(base);\n            }\n          }\n          // If no error message was set, the validation passed\n          if (errorMessage === undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          errorMessage = undefined;\n          var input = inputElement.value;\n          var num = Number(input);\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage: (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.invalidNumber) || \"Invalid number\"\n            };\n          }\n          // Check if the number is within the specified range\n          if (min !== undefined && num < min || max !== undefined && num > max) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.range) || \"Number must be between \".concat(min, \" and \").concat(max);\n          }\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            var numStr = num.toString();\n            var decimalIndex = numStr.indexOf(\".\");\n            var numDecimalPlaces = decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.decimalPlaces) || \"Number must have no more than \".concat(decimalPlaces, \" decimal places\");\n            }\n          }\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.negative) || \"Negative numbers are not allowed\";\n          }\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.integersOnly) || \"Only integers are allowed\";\n          }\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            var parsedNum = parseInt(input, base);\n            if (isNaN(parsedNum)) {\n              errorMessage = (customErrorMessages === null || customErrorMessages === void 0 ? void 0 : customErrorMessages.base) || \"Number must be in base \".concat(base);\n            }\n          }\n          // If no error message was set, the validation passed\n          if (errorMessage == undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n            } else {\n              inputElement.style.border = \"\";\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateInteger = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n      var when = (_a = rules.ValidateInteger) === null || _a === void 0 ? void 0 : _a.when;\n      var input = (_b = rules.ValidateInteger) === null || _b === void 0 ? void 0 : _b.input;\n      var minValue = (_c = rules.ValidateInteger) === null || _c === void 0 ? void 0 : _c.minValue;\n      var maxValue = (_d = rules.ValidateInteger) === null || _d === void 0 ? void 0 : _d.maxValue;\n      var uniqueValues = (_e = rules.ValidateInteger) === null || _e === void 0 ? void 0 : _e.uniqueValues;\n      var positiveOnly = (_f = rules.ValidateInteger) === null || _f === void 0 ? void 0 : _f.positiveOnly;\n      var evenOnly = (_g = rules.ValidateInteger) === null || _g === void 0 ? void 0 : _g.evenOnly;\n      var divisibleBy = (_h = rules.ValidateInteger) === null || _h === void 0 ? void 0 : _h.divisibleBy;\n      var invalid = (_j = rules.ValidateInteger) === null || _j === void 0 ? void 0 : _j.invalid;\n      var customErrorMessages = (_k = rules.ValidateInteger) === null || _k === void 0 ? void 0 : _k.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var value = Number(inputElement.value);\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var errorMessage = __assign(__assign({}, customErrorMessages), {\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: \"The value must be between \".concat(minValue, \" and \").concat(maxValue),\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: \"The value must be divisible by \".concat(divisibleBy)\n          });\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n          // Check that the input value is within the specified range (if provided)\n          if (minValue !== undefined && value < minValue || maxValue !== undefined && value > maxValue) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var value = Number(inputElement.value);\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var errorMessage = __assign(__assign({}, customErrorMessages), {\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: \"The value must be between \".concat(minValue, \" and \").concat(maxValue),\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: \"The value must be divisible by \".concat(divisibleBy)\n          });\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n          // Check that the input value is within the specified range (if provided)\n          if (minValue !== undefined && value < minValue || maxValue !== undefined && value > maxValue) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateFloat = function () {\n      var _a, _b, _c, _d, _e, _f;\n      var when = (_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.when;\n      var input = (_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.input;\n      var customErrorMessages = (_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      var defaultErrorMessages = __assign({\n        required: \"This field is required\",\n        invalid: \"Please enter a valid number\",\n        min: \"Please enter a number greater than or equal to \".concat((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.min),\n        max: \"Please enter a number less than or equal to \".concat((_e = rules.ValidateFloat) === null || _e === void 0 ? void 0 : _e.max),\n        precision: \"Please enter a number with at most \".concat((_f = rules.ValidateFloat) === null || _f === void 0 ? void 0 : _f.precision, \" decimal places\")\n      }, customErrorMessages);\n      var errorMessages = defaultErrorMessages;\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var _a, _b, _c, _d;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var value = inputElement.value;\n          var isEmpty = !value.trim();\n          if (((_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.required) && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required;\n              }\n            }\n          }\n          var numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid;\n              }\n            }\n          }\n          if (((_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.min) !== undefined && numberValue < rules.ValidateFloat.min) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min;\n              }\n            }\n          }\n          if (((_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.max) !== undefined && numberValue > rules.ValidateFloat.max) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max;\n              }\n            }\n          }\n          if (((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.precision) !== undefined) {\n            var parts = value.split(\".\");\n            if (parts.length === 2 && parts[1].length > rules.ValidateFloat.precision) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          var _a, _b, _c, _d;\n          var value = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var isEmpty = !value.trim();\n          if (((_a = rules.ValidateFloat) === null || _a === void 0 ? void 0 : _a.required) && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required;\n              }\n            }\n          }\n          var numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid;\n              }\n            }\n          }\n          if (((_b = rules.ValidateFloat) === null || _b === void 0 ? void 0 : _b.min) !== undefined && numberValue < rules.ValidateFloat.min) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min;\n              }\n            }\n          }\n          if (((_c = rules.ValidateFloat) === null || _c === void 0 ? void 0 : _c.max) !== undefined && numberValue > rules.ValidateFloat.max) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max;\n              }\n            }\n          }\n          if (((_d = rules.ValidateFloat) === null || _d === void 0 ? void 0 : _d.precision) !== undefined) {\n            var parts = value.split(\".\");\n            if (parts.length === 2 && parts[1].length > rules.ValidateFloat.precision) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateDate = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n      var when = (_a = rules.ValidateDate) === null || _a === void 0 ? void 0 : _a.when;\n      var inputValue = (_b = rules.ValidateDate) === null || _b === void 0 ? void 0 : _b.input;\n      var minDate = (_c = rules.ValidateDate) === null || _c === void 0 ? void 0 : _c.minDate;\n      var maxDate = (_d = rules.ValidateDate) === null || _d === void 0 ? void 0 : _d.maxDate;\n      var allowOnlyBusinessDay = (_e = rules.ValidateDate) === null || _e === void 0 ? void 0 : _e.allowOnlyBusinessDay;\n      var allowOnlyWeekend = (_f = rules.ValidateDate) === null || _f === void 0 ? void 0 : _f.allowOnlyWeekend;\n      var customFormat = (_g = rules.ValidateDate) === null || _g === void 0 ? void 0 : _g.customFormat;\n      var timeZone = (_h = rules.ValidateDate) === null || _h === void 0 ? void 0 : _h.timeZone;\n      var customErrorMessages = (_j = rules.ValidateDate) === null || _j === void 0 ? void 0 : _j.customErrorMessages;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(inputValue, \"\\\"]\"));\n      function isBusinessDayCheck(date) {\n        // assuming weekends are Saturday (6) and Sunday (0)\n        var dayOfWeek = date.getDay();\n        return dayOfWeek !== 0 && dayOfWeek !== 6;\n      }\n      function isWeekendCheck(date) {\n        var dayOfWeek = date.getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6;\n      }\n      var defaultErrorMessages = {\n        invalidDate: \"Invalid date format\",\n        minDate: \"The date must be on or after \".concat((_l = (_k = rules.ValidateDate) === null || _k === void 0 ? void 0 : _k.minDate) === null || _l === void 0 ? void 0 : _l.toLocaleDateString()),\n        maxDate: \"The date must be on or before \".concat((_o = (_m = rules.ValidateDate) === null || _m === void 0 ? void 0 : _m.maxDate) === null || _o === void 0 ? void 0 : _o.toLocaleDateString()),\n        businessDay: \"Date is not a business day\",\n        notWeekend: \"Date is not a weekend\",\n        invalidFormat: \"Date is not in the expected format\",\n        invalidTimeZone: \"Time zone is not valid\"\n      };\n      var errorMessages = __assign(__assign({}, customErrorMessages), defaultErrorMessages);\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var input = inputElement.value;\n          var inputDate = new Date(input);\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate;\n              }\n            }\n          }\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate;\n              }\n            }\n          }\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate;\n              }\n            }\n          }\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay;\n              }\n            }\n          }\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend;\n              }\n            }\n          }\n          if (timeZone) {\n            try {\n              var formatter = new Intl.DateTimeFormat(\"en-US\", __assign({\n                timeZone: timeZone\n              }, customFormat && {\n                dateStyle: \"short\",\n                timeStyle: \"short\"\n              }));\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var input = inputElement.value;\n          var inputDate = new Date(input);\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate;\n              }\n            }\n          }\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate;\n              }\n            }\n          }\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate;\n              }\n            }\n          }\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay;\n              }\n            }\n          }\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend;\n              }\n            }\n          }\n          if (timeZone) {\n            try {\n              var formatter = new Intl.DateTimeFormat(\"en-US\", __assign({\n                timeZone: timeZone\n              }, customFormat && {\n                dateStyle: \"short\",\n                timeStyle: \"short\"\n              }));\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateTime = function () {\n      var _a = rules.ValidateTime,\n        when = _a.when,\n        input = _a.input,\n        customErrorMessages = _a.customErrorMessages,\n        timeRange = _a.timeRange,\n        timeInterval = _a.timeInterval,\n        timezone = _a.timezone;\n      var defaultErrorMessages = {\n        invalidFormat: \"Invalid time format\",\n        invalidRange: \"Time is out of range\",\n        invalidTimezone: \"Invalid timezone\",\n        invalidInterval: \"Time is not within the specified interval\"\n      };\n      var errorMessages = __assign(__assign({}, customErrorMessages), defaultErrorMessages);\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var timeString = inputElement.value;\n          // Helper function to pad a number with leading zeros\n          function pad(num) {\n            var str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n          // Check for valid time format\n          if (!timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat;\n              }\n            }\n          }\n          // Check for valid time range\n          var timeParts = timeString.split(\":\").map(function (part) {\n            return parseInt(part, 10);\n          });\n          var hours = timeParts[0];\n          var minutes = timeParts[1];\n          var seconds = timeParts[2] || 0;\n          if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange;\n              }\n            }\n          }\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            var startTime = new Date(\"2022-01-01T\".concat(timeRange.startTime));\n            var endTime = new Date(\"2022-01-01T\".concat(timeRange.endTime));\n            var time = new Date(\"2022-01-01T\".concat(timeString));\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            var timeParts_1 = timeString.split(\":\").map(function (part) {\n              return parseInt(part, 10);\n            });\n            var totalMinutes = timeParts_1[0] * 60 + timeParts_1[1];\n            if (totalMinutes < timeInterval.startInterval || totalMinutes > timeInterval.endInterval) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          var timeString = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          // Helper function to pad a number with leading zeros\n          function pad(num) {\n            var str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n          // Check for valid time format\n          if (!timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat;\n              }\n            }\n          }\n          // Check for valid time range\n          var timeParts = timeString.split(\":\").map(function (part) {\n            return parseInt(part, 10);\n          });\n          var hours = timeParts[0];\n          var minutes = timeParts[1];\n          var seconds = timeParts[2] || 0;\n          if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59 || seconds < 0 || seconds > 59) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange;\n              }\n            }\n          }\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            var startTime = new Date(\"2022-01-01T\".concat(timeRange.startTime));\n            var endTime = new Date(\"2022-01-01T\".concat(timeRange.endTime));\n            var time = new Date(\"2022-01-01T\".concat(timeString));\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            var timeParts_2 = timeString.split(\":\").map(function (part) {\n              return parseInt(part, 10);\n            });\n            var totalMinutes = timeParts_2[0] * 60 + timeParts_2[1];\n            if (totalMinutes < timeInterval.startInterval || totalMinutes > timeInterval.endInterval) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateUrl = function () {\n      var when = rules.ValidateUrl.when;\n      var input = rules.ValidateUrl.input;\n      var customErrorMessages = rules.ValidateUrl.CustomErrorMessages;\n      var checkUrl = rules.ValidateUrl.checkUrl;\n      var checkProtocol = rules.ValidateUrl.checkProtocol;\n      var checkDomain = rules.ValidateUrl.checkDomain;\n      var checkIpAddress = rules.ValidateUrl.checkIpAddress;\n      var checkInAccessibleUrl = rules.ValidateUrl.checkAccessibleUrl;\n      var checkCharacters = rules.ValidateUrl.checkCharacters;\n      var protocols = rules.ValidateUrl.protocols;\n      var inputElement = form.querySelector(\"input[name=\\\"\".concat(input, \"\\\"]\"));\n      var defaultErrorMessages = {\n        invalidUrl: \"The URL is not well-formed\",\n        invalidProtocol: \"The URL has an invalid protocol\",\n        invalidDomain: \"The URL has an invalid domain name\",\n        invalidIpAddress: \"The URL has an invalid IP address\",\n        inaccessibleUrl: \"The URL is inaccessible\",\n        invalidCharacters: \"The URL contains invalid characters\",\n        protocolNotAllowed: \"The URL must use the \".concat(protocols, \" protocol\")\n      };\n      var errorMessages = __assign(__assign({}, customErrorMessages), defaultErrorMessages);\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", function () {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var url = inputElement.value;\n          var urlRegex = /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl;\n                }\n              }\n            }\n          }\n          try {\n            var parsedUrl = new URL(url);\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed;\n                  }\n                }\n              }\n            }\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol;\n                  }\n                }\n              }\n            }\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain;\n                  }\n                }\n              }\n            }\n            if (checkIpAddress) {\n              if (parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)) {\n                var octets = parsedUrl.hostname.split(\".\");\n                if (octets.some(function (octet) {\n                  return parseInt(octet) > 255;\n                })) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress;\n                    }\n                  }\n                }\n              }\n            }\n            if (checkInAccessibleUrl) {\n              fetch(url).then(function (response) {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl;\n                }\n              }\n            }\n          }\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", function () {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n          } else {\n            inputElement.style.border = \"\";\n          }\n          var url = inputElement.value;\n          var urlRegex = /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl;\n                }\n              }\n            }\n          }\n          try {\n            var parsedUrl = new URL(url);\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed;\n                  }\n                }\n              }\n            }\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol;\n                  }\n                }\n              }\n            }\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain;\n                  }\n                }\n              }\n            }\n            if (checkIpAddress) {\n              if (parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)) {\n                var octets = parsedUrl.hostname.split(\".\");\n                if (octets.some(function (octet) {\n                  return parseInt(octet) > 255;\n                })) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress;\n                    }\n                  }\n                }\n              }\n            }\n            if (checkInAccessibleUrl) {\n              fetch(url).then(function (response) {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl;\n                }\n              }\n            }\n          }\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n    var runValidateCreditCard = function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      var when = (_a = rules.ValidateCreditCard) === null || _a === void 0 ? void 0 : _a.when;\n      var allowedCards = (_b = rules.ValidateCreditCard) === null || _b === void 0 ? void 0 : _b.allowedCards;\n      var cardNumberValue = (_c = rules.ValidateCreditCard) === null || _c === void 0 ? void 0 : _c.cardNumber;\n      var expirationDateValue = (_d = rules.ValidateCreditCard) === null || _d === void 0 ? void 0 : _d.expirationDate;\n      var cvvValue = (_e = rules.ValidateCreditCard) === null || _e === void 0 ? void 0 : _e.cvv;\n      var billingZipValue = (_f = rules.ValidateCreditCard) === null || _f === void 0 ? void 0 : _f.billingZip;\n      var customErrorMessages = (_g = rules.ValidateCreditCard) === null || _g === void 0 ? void 0 : _g.customErrorMessages;\n      var getCardType = (_h = rules.ValidateCreditCard) === null || _h === void 0 ? void 0 : _h.getCardType;\n      var cardNumberElement = form.querySelector(\"input[name=\\\"\".concat(cardNumberValue, \"\\\"]\"));\n      var expirationDateElement = form.querySelector(\"input[name=\\\"\".concat(expirationDateValue, \"\\\"]\"));\n      var cvvElement = form.querySelector(\"input[name=\\\"\".concat(cvvValue, \"\\\"]\"));\n      var billingZipElement = form.querySelector(\"input[name=\\\"\".concat(billingZipValue, \"\\\"]\"));\n      var defaultErrorMessages = {\n        invalidCardNumber: \"Invalid credit card number\",\n        onlyAllowedCards: \"Only \".concat(allowedCards, \"  are allowed\"),\n        invalidExpirationDate: \"Invalid expiration date\",\n        invalidCVV: \"Invalid CVV code\",\n        invalidBillingZip: \"Invalid billing zip code\"\n      };\n      var errorMessages = __assign(__assign({}, customErrorMessages), defaultErrorMessages);\n      function GetCardType(cardNumber) {\n        // This function determines the card type based on the first digits of the card number\n        // You can implement your own logic to determine the card type\n        // Here's an example implementation that supports Visa, Mastercard, American Express, and Discover cards:\n        if (/^4/.test(cardNumber)) {\n          return \"Visa\";\n        } else if (/^5[1-5]/.test(cardNumber)) {\n          return \"Mastercard\";\n        } else if (/^3[47]/.test(cardNumber)) {\n          return \"American Express\";\n        } else if (/^6(?:011|5)/.test(cardNumber)) {\n          return \"Discover\";\n        } else {\n          return \"Unknown\";\n        }\n      }\n      function isValidCreditCardNumber(cardNumber) {\n        // This function uses the Luhn algorithm to validate the credit card number\n        // You can find more information about the algorithm here: https://en.wikipedia.org/wiki/Luhn_algorithm\n        var strippedCardNumber = cardNumber.replace(/\\D/g, \"\");\n        var sum = 0;\n        var shouldDouble = false;\n        for (var i = strippedCardNumber.length - 1; i >= 0; i--) {\n          var digit = parseInt(strippedCardNumber.charAt(i), 10);\n          if (shouldDouble) {\n            if ((digit *= 2) > 9) digit -= 9;\n          }\n          sum += digit;\n          shouldDouble = !shouldDouble;\n        }\n        return sum % 10 === 0 && sum > 0;\n      }\n      function isValidCreditCardExpirationDate(expirationDate) {\n        // This function validates the expiration date of the credit card\n        // The expiration date should be in the format \"MM/YY\"\n        var currentDate = new Date();\n        var currentYear = currentDate.getFullYear();\n        var currentMonth = currentDate.getMonth() + 1;\n        var _a = expirationDate.split(\"/\"),\n          expirationMonth = _a[0],\n          expirationYear = _a[1];\n        var expMonth = parseInt(expirationMonth, 10);\n        var expYear = parseInt(expirationYear, 10) + 2000;\n        // Check that the expiration date is in the future\n        if (expYear > currentYear || expYear === currentYear && expMonth >= currentMonth) {\n          return true;\n        }\n        return false;\n      }\n      function isValidCreditCardCVV(cvv) {\n        // This function validates the CVV code of the credit card\n        // You can implement your own validation logic based on your requirements\n        var strippedCVV = cvv.replace(/\\D/g, \"\");\n        return /^[0-9]{3,4}$/.test(strippedCVV);\n      }\n      function isValidCreditCardBillingZip(billingZip) {\n        // This function validates the billing zip code of the credit card\n        // You can implement your own validation logic based on your requirements\n        var strippedBillingZip = billingZip.replace(/\\D/g, \"\");\n        return /^[0-9]{5}(?:-[0-9]{4})?$/.test(strippedBillingZip);\n      }\n      var checkCardNumber = function (cardNumber) {\n        // Validate the credit card number\n        var isValidCardNumber = isValidCreditCardNumber(cardNumber);\n        if (!isValidCardNumber) {\n          var errorMessage_1 = errorMessages.invalidCardNumber;\n          return errorMessage_1;\n        } else {\n          return \"\";\n        }\n      };\n      var checkCardType = function (cardNumber) {\n        var cardType = GetCardType(cardNumber);\n        // Check if the card type is allowed\n        if (allowedCards) {\n          if (allowedCards.length > 0 && !allowedCards.includes(cardType)) {\n            var errorMessage_2 = errorMessages.onlyAllowedCards;\n            return errorMessage_2;\n          } else {\n            return \"\";\n          }\n        }\n      };\n      var checkExpirationDate = function (expirationDate) {\n        // Validate the expiration date\n        var isValidExpirationDate = isValidCreditCardExpirationDate(expirationDate);\n        if (!isValidExpirationDate) {\n          var errorMessage_3 = errorMessages.invalidExpirationDate;\n          return errorMessage_3;\n        } else {\n          return \"\";\n        }\n      };\n      var checkCvv = function (cvv) {\n        // Validate the CVV code\n        var isValidCVV = isValidCreditCardCVV(cvv);\n        if (!isValidCVV) {\n          var errorMessage_4 = errorMessages.invalidCVV;\n          return errorMessage_4;\n        } else {\n          return \"\";\n        }\n      };\n      var checkBillingZip = function (billingZip) {\n        // Validate the billing zip code\n        var isValidBillingZip = isValidCreditCardBillingZip(billingZip);\n        if (!isValidBillingZip) {\n          var errorMessage_5 = errorMessages.invalidBillingZip;\n          return errorMessage_5;\n        } else {\n          return \"\";\n        }\n      };\n      if (when === \"typing\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"input\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n            } else {\n              cardNumberElement.style.border = \"\";\n            }\n            var value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value);\n                }\n              }\n            }\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"input\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n            } else {\n              expirationDateElement.style.border = \"\";\n            }\n            var value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n        if (cvvElement) {\n          cvvElement.addEventListener(\"input\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n            } else {\n              cvvElement.style.border = \"\";\n            }\n            var value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"input\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n            } else {\n              billingZipElement.style.border = \"\";\n            }\n            var value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      } else if (when === \"onblur\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"blur\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n            } else {\n              cardNumberElement.style.border = \"\";\n            }\n            var value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value);\n                }\n              }\n            }\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"blur\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n            } else {\n              expirationDateElement.style.border = \"\";\n            }\n            var value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n        if (cvvElement) {\n          cvvElement.addEventListener(\"blur\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n            } else {\n              cvvElement.style.border = \"\";\n            }\n            var value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"blur\", function () {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n            } else {\n              billingZipElement.style.border = \"\";\n            }\n            var value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      }\n    };\n    if (rules) {\n      if (rules.validateRequired) {\n        runValidateRequired();\n      } else if (rules.ValidateMinMax) {\n        runValidateMinMax();\n      } else if (rules.ValidateEmail) {\n        runValidateEmail();\n      } else if (rules.ValidatePattern) {\n        runValidatePattern();\n      } else if (rules.ValidatePhone) {\n        runValidatePhone();\n      } else if (rules.ValidateNumber) {\n        runValidateNumber();\n      } else if (rules.ValidateInteger) {\n        runValidateInteger();\n      } else if (rules.ValidateFloat) {\n        runValidateFloat();\n      } else if (rules.ValidateDate) {\n        runValidateDate();\n      } else if (rules.ValidateTime) {\n        runValidateTime();\n      } else if (rules.ValidateUrl) {\n        runValidateUrl();\n      } else if (rules.ValidateCreditCard) {\n        runValidateCreditCard();\n      }\n    }\n  };\n  ValidateForm.prototype.render = function () {\n    return react_1.default.createElement(\"div\", {\n      id: \"_validation_wrapper\"\n    }, this.props.children);\n  };\n  return ValidateForm;\n}(react_1.default.Component);\nexports.default = ValidateForm;","map":{"version":3,"names":["react_1","__importDefault","require","countryCodeRegexMap","US","CA","MX","GB","FR","DE","JP","AU","NZ","IN","CN","HK","SG","TW","KR","TH","PH","VN","MY","BE","NL","IT","ES","PT","AT","CH","SE","NO","DK","FI","BR","AR","CO","PE","CL","VE","CR","PA","DO","GT","EC","UY","PY","BO","HN","NI","SV","PR","JM","BB","KY","VG","TT","DM","GD","GH","KE","NG","UG","RW","CM","SN","TZ","CI","MG","ZM","ZW","MW","LS","SZ","KM","DJ","RE","YT","WF","NU","TK","FM","MH","SA","RU","ValidateForm","_super","__extends","prototype","componentDidMount","init","componentDidUpdate","prevProps","props","rules","_a","onSubmit","errorElement","allowedKeys","wrapper","document","getElementById","form","children","submit_button","querySelector","errorText","errorMessage","String","querySelectorAll","forEach","input","index","style","transition","transitionDelay","addEventListener","e","preventDefault","innerHTML","submit","setErrorText","message","innerText","runValidateRequired","event","target","borderColor","requiredInputs","validateRequired","applyOnly","_b","inputName","push","concat","missingInputs","value","length","notvalidated","focus","_c","action","border","_d","_e","_f","_g","onsuccess","runValidateMinMax","inputs","ValidateMinMax","when","min","max","type","inputMinMessage","getAttribute","inputMaxMessage","exceedsMin","exceedsMax","_h","_j","_k","Number","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","runValidateEmail","emailPattern","ValidateEmail","emailInput","invalid","email","test","runValidatePattern","inputElement","ValidatePattern","options","allowEmpty","regex","RegExp","pattern","modifiers","replace","Error","isValid","runValidatePhone","phoneInput","ValidatePhone","countryCode","mobileRegex","landlineRegex","phoneNumber","_i","Object","values","isLandlineNumber","isMobileNumber","runValidateNumber","ValidateNumber","decimalPlaces","allowNegative","integersOnly","base","customErrorMessages","undefined","num","isNaN","invalidNumber","range","numStr","toString","decimalIndex","indexOf","numDecimalPlaces","negative","isInteger","parsedNum","parseInt","runValidateInteger","ValidateInteger","minValue","maxValue","uniqueValues","positiveOnly","evenOnly","divisibleBy","__assign","notANumber","notAnInteger","outOfRange","notUnique","notPositive","notEven","notDivisible","includes","runValidateFloat","ValidateFloat","defaultErrorMessages","required","precision","errorMessages","isEmpty","trim","numberValue","parseFloat","isFinite","parts","split","runValidateDate","ValidateDate","inputValue","minDate","maxDate","allowOnlyBusinessDay","allowOnlyWeekend","customFormat","timeZone","isBusinessDayCheck","date","dayOfWeek","getDay","isWeekendCheck","invalidDate","toLocaleDateString","businessDay","notWeekend","invalidFormat","invalidTimeZone","inputDate","Date","getTime","formatter","Intl","DateTimeFormat","dateStyle","timeStyle","format","error","runValidateTime","ValidateTime","timeRange","timeInterval","timezone","invalidRange","invalidTimezone","invalidInterval","timeString","pad","str","match","timeParts","map","part","hours","minutes","seconds","startTime","endTime","time","timeParts_1","totalMinutes","startInterval","endInterval","timeParts_2","runValidateUrl","ValidateUrl","CustomErrorMessages","checkUrl","checkProtocol","checkDomain","checkIpAddress","checkInAccessibleUrl","checkAccessibleUrl","checkCharacters","protocols","invalidUrl","invalidProtocol","invalidDomain","invalidIpAddress","inaccessibleUrl","invalidCharacters","protocolNotAllowed","url","urlRegex","parsedUrl","URL","protocol","hostname","octets","some","octet","fetch","then","response","ok","err","runValidateCreditCard","ValidateCreditCard","allowedCards","cardNumberValue","cardNumber","expirationDateValue","expirationDate","cvvValue","cvv","billingZipValue","billingZip","getCardType","cardNumberElement","expirationDateElement","cvvElement","billingZipElement","invalidCardNumber","onlyAllowedCards","invalidExpirationDate","invalidCVV","invalidBillingZip","GetCardType","isValidCreditCardNumber","strippedCardNumber","sum","shouldDouble","i","digit","charAt","isValidCreditCardExpirationDate","currentDate","currentYear","getFullYear","currentMonth","getMonth","expirationMonth","expirationYear","expMonth","expYear","isValidCreditCardCVV","strippedCVV","isValidCreditCardBillingZip","strippedBillingZip","checkCardNumber","isValidCardNumber","errorMessage_1","checkCardType","cardType","errorMessage_2","checkExpirationDate","isValidExpirationDate","errorMessage_3","checkCvv","isValidCVV","errorMessage_4","checkBillingZip","isValidBillingZip","errorMessage_5","render","default","createElement","id","Component","exports"],"sources":["/Users/arshadyaseen/Desktop/ReactFormValidator/package/src/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\";\n\ninterface ValidateRequiredObj {\n  applyOnly?: Array<string>;\n  action: \"both\" | \"input_red_border\" | \"show_error_message\";\n  notvalidated?: Function;\n  onsuccess?: Function;\n  message?: string;\n}\ninterface ValidateMinMaxObj {\n  when?: \"onblur\" | \"typing\";\n  message?: {\n    min?: string;\n    max?: string;\n  };\n  onsuccess?: Function;\n  exceedsMax?: Function;\n  exceedsMin?: Function;\n}\ninterface ValidatePatternObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  pattern: string;\n  type?: \"regex\" | \"wildcard\";\n  modifiers?: string;\n  errorMessage?: string;\n  allowEmpty?: boolean;\n  onsuccess?: Function;\n  invalid?: Function;\n}\ninterface ValidatePhoneObj {\n  when: \"onblur\" | \"typing\";\n  countryCode:\n    | \"US\"\n    | \"CA\"\n    | \"MX\"\n    | \"GB\"\n    | \"FR\"\n    | \"DE\"\n    | \"JP\"\n    | \"AU\"\n    | \"NZ\"\n    | \"IN\"\n    | \"CN\"\n    | \"HK\"\n    | \"SG\"\n    | \"TW\"\n    | \"KR\"\n    | \"TH\"\n    | \"PH\"\n    | \"VN\"\n    | \"MY\"\n    | \"BE\"\n    | \"NL\"\n    | \"IT\"\n    | \"ES\"\n    | \"PT\"\n    | \"AT\"\n    | \"CH\"\n    | \"SE\"\n    | \"NO\"\n    | \"DK\"\n    | \"FI\"\n    | \"BR\"\n    | \"AR\"\n    | \"CO\"\n    | \"PE\"\n    | \"CL\"\n    | \"VE\"\n    | \"CR\"\n    | \"PA\"\n    | \"DO\"\n    | \"GT\"\n    | \"EC\"\n    | \"UY\"\n    | \"PY\"\n    | \"BO\"\n    | \"HN\"\n    | \"NI\"\n    | \"SV\"\n    | \"PR\"\n    | \"JM\"\n    | \"BB\"\n    | \"KY\"\n    | \"VG\"\n    | \"TT\"\n    | \"DM\"\n    | \"GD\"\n    | \"GH\"\n    | \"KE\"\n    | \"NG\"\n    | \"UG\"\n    | \"RW\"\n    | \"CM\"\n    | \"SN\"\n    | \"TZ\"\n    | \"CI\"\n    | \"MG\"\n    | \"ZM\"\n    | \"ZW\"\n    | \"MW\"\n    | \"LS\"\n    | \"SZ\"\n    | \"KM\"\n    | \"DJ\"\n    | \"RE\"\n    | \"YT\"\n    | \"WF\"\n    | \"NU\"\n    | \"TK\"\n    | \"FM\"\n    | \"MH\"\n    | \"SA\"\n    | \"RU\";\n  phoneInput?: string;\n  onsuccess?: Function;\n  invalid?: Function;\n  message?: string;\n  isLandlineNumber?: Function;\n  isMobileNumber?: Function;\n}\n\ninterface ValidateEmailObj {\n  when?: \"onblur\" | \"typing\";\n  message?: string;\n  onsuccess?: Function;\n  invalid?: Function;\n  emailInput?: string;\n  type?:\n    | \"personal\"\n    | \"business\"\n    | \"yahoo\"\n    | \"gmail\"\n    | \"hotmail\"\n    | \"aol\"\n    | \"isp\"\n    | \"education\"\n    | \"government\"\n    | \"nonprofit\"\n    | \"international\"\n    | \"domain-specific\"\n    | \"alias\";\n}\n\ninterface ValidateNumberObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  min?: number;\n  max?: number;\n  decimalPlaces?: number;\n  allowNegative?: boolean;\n  integersOnly?: boolean;\n  base?: number;\n  customErrorMessages?: {\n    [key: string]: string;\n  };\n  onsuccess?: Function;\n  invalid?: Function;\n}\ninterface ValidateIntegerObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  minValue?: number;\n  maxValue?: number;\n  uniqueValues?: number[];\n  positiveOnly?: boolean;\n  evenOnly?: boolean;\n  divisibleBy?: number;\n  invalid?: Function;\n  customErrorMessages?: {\n    notANumber?: string;\n    notAnInteger?: string;\n    outOfRange?: string;\n    notUnique?: string;\n    notPositive?: string;\n    notEven?: string;\n    notDivisible?: string;\n  };\n}\n\ninterface ValidateFloatObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  invalid?: string;\n  required?: boolean;\n  min?: number;\n  max?: number;\n  precision?: number;\n  customErrorMessages?: {\n    required?: string;\n    invalid?: string;\n    min?: string;\n    max?: string;\n    precision?: string;\n  };\n}\ninterface ValidateDateObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string | Date;\n  minDate?: Date;\n  maxDate?: Date;\n  allowOnlyBusinessDay?: boolean;\n  allowOnlyWeekend?: boolean;\n  customFormat?: string;\n  timeZone?: string;\n  customErrorMessages?: {\n    invalidDate?: string;\n    minDate?: string;\n    maxDate?: string;\n    businessDay?: string;\n    notWeekend?: string;\n    invalidFormat?: string;\n    invalidTimeZone?: string;\n  };\n}\n\ninterface TimeRange {\n  startTime?: string;\n  endTime?: string;\n}\n\ninterface TimeInterval {\n  startInterval?: number;\n  endInterval?: number;\n}\n\ninterface Timezone {\n  name?: string;\n  offset?: number;\n}\ninterface ValidateTimeObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  timezone?: Timezone;\n  timeRange?: TimeRange;\n  timeInterval?: TimeInterval;\n  customErrorMessages?: {\n    invalidFormat?: string;\n    invalidRange?: string;\n    invalidTimezone?: string;\n    invalidInterval?: string;\n  };\n}\n\ninterface ValidateUrlObj {\n  when?: \"onblur\" | \"typing\";\n  input?: string;\n  CustomErrorMessages?: {\n    invalidUrl?: string;\n    invalidProtocol?: string;\n    invalidDomain?: string;\n    invalidIpAddress?: string;\n    inaccessibleUrl?: string;\n    invalidCharacters?: string;\n  };\n  checkUrl?: boolean;\n  checkProtocol?: boolean;\n  checkDomain?: boolean;\n  checkIpAddress?: boolean;\n  checkAccessibleUrl?: boolean;\n  checkCharacters?: boolean;\n  protocols?: string[];\n}\ninterface ValidateCreditCardObj {\n  when?: \"onblur\" | \"typing\";\n  allowedCards?: string[];\n  cardNumber?: string;\n  expirationDate?: string;\n  cvv?: string;\n  billingZip?: string;\n  getCardType?: FunctionComponent;\n  customErrorMessages?: {\n    onlyAllowedCards?: string;\n    invalidCardNumber?: string;\n    invalidExpirationDate?: string;\n    invalidCVV?: string;\n    invalidBillingZip?: string;\n  };\n}\n\ninterface onSubmitFunction {\n  (event: React.FormEvent<HTMLFormElement>): void;\n  \n}\ninterface Rules {\n  validateRequired?: ValidateRequiredObj;\n  ValidateMinMax?: ValidateMinMaxObj;\n  ValidateEmail?: ValidateEmailObj;\n  ValidatePattern?: ValidatePatternObj;\n  ValidatePhone?: ValidatePhoneObj;\n  ValidateNumber?: ValidateNumberObj;\n  ValidateInteger?: ValidateIntegerObj;\n  ValidateFloat?: ValidateFloatObj;\n  ValidateDate?: ValidateDateObj;\n  ValidateTime?: ValidateTimeObj;\n  ValidateUrl?: ValidateUrlObj;\n  ValidateCreditCard?: ValidateCreditCardObj;\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  rules?: Rules;\n  errorElement?: string;\n  onSubmit?: onSubmitFunction;\n}\n\ninterface ValidateForm {\n  props: Props;\n}\n\ninterface CountryCodeRegexMap {\n  [countryCode: string]: RegExp;\n}\n\nconst countryCodeRegexMap: CountryCodeRegexMap = {\n  US: /^(\\+?1)?[2-9]\\d{9}$/,\n  CA: /^(\\+?1)?[2-9]\\d{9}$/,\n  MX: /^(\\+?52)?(1)?\\d{10}$/,\n  GB: /^(\\+?44|0)7\\d{9}$/,\n  FR: /^(\\+?33|0)[67]\\d{8}$/,\n  DE: /^(\\+49|0)[1-9]\\d{10}$/,\n  JP: /^(\\+?81|0)\\d{1,4}[ \\-]?\\d{1,4}[ \\-]?\\d{4}$/,\n  AU: /^(\\+?61|0)[45789]\\d{8}$/,\n  NZ: /^(\\+?64|0)[28]\\d{7,9}$/,\n  IN: /^(\\+?91|0)?[6789]\\d{9}$/,\n  CN: /^(\\+?0?86\\-?)?1[3456789]\\d{9}$/,\n  HK: /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\n  SG: /^(\\+65)?[89]\\d{7}$/,\n  TW: /^(\\+?886\\-?|0)?9\\d{8}$/,\n  KR: /^(\\+?82|0)?1[0-9]{1,2}-?[0-9]{3,4}-?[0-9]{4}$/,\n  TH: /^(\\+66|66|0)\\d{8}$/,\n  PH: /^(\\+?63|0)?[89]\\d{9}$/,\n  VN: /^(\\+?84|0)?[1-9]\\d{8}$/,\n  MY: /^(\\+?6?01){1}(([145]{1}(-|\\s)?\\d{7,8})|([236789]{1}(\\s|-)?\\d{7}))$/,\n  BE: /^(\\+?32|0)4?\\d{8}$/,\n  NL: /^(\\+?31|0)6?\\d{8}$/,\n  IT: /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  ES: /^(\\+?34)?[-. ]?6\\d{8}$/,\n  PT: /^(\\+351)?9[1236]\\d{7}$/,\n  AT: /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  CH: /^(\\+41|0)([1-9])\\d{1,12}$/,\n  SE: /^(\\+?46|0)7\\d{8}$/,\n  NO: /^(\\+?47)?[49]\\d{7}$/,\n  DK: /^(\\+?45)?(\\d{8})$/,\n  FI: /^(\\+?358|0)\\s?(4(0|1|2|4|5)|50|4(6|7)|[5-7]|9\\d)\\s?\\d{6,7}$/,\n  BR: /^(\\+?55|0)?([1-9]{2})?([6-9]{1})(\\d{8})$/,\n  AR: /^(\\+?54|0)?([1-9])?([1-9])(\\d{7,8})$/,\n  CO: /^(\\+?57|0)?([1-8]{1})?([2-4]{1})(\\d{7})$/,\n  PE: /^(\\+?51|0)?([1-9]{2})?([1-9]{1})(\\d{7})$/,\n  CL: /^(\\+?56|0)?([2-9]{1})?([2-9])(\\d{6,7})$/,\n  VE: /^(\\+?58|0)?([4]{1})(1|2|4|6)(\\d{7})$/,\n  CR: /^(\\+?506)?([2-8]{1})(\\d{7})$/,\n  PA: /^(\\+?507)?([2-8]{1})(\\d{7})$/,\n  DO: /^(\\+?1|0)?([8]{1})(0|1)(\\d{7})$/,\n  GT: /^(\\+?502)?([23]{1})(\\d{7})$/,\n  EC: /^(\\+?593|0)([679]{1})(\\d{7})$/,\n  UY: /^(\\+?598|0)([4]{1}[2-9]{1}|[5-9]{1})(\\d{6})$/,\n  PY: /^(\\+?595|0)([9]{1})([1-9]{1})(\\d{6})$/,\n  BO: /^(\\+?591)?([267]{1})(\\d{7})$/,\n  HN: /^(\\+?504)?([239]{1})(\\d{7})$/,\n  NI: /^(\\+?505)?([5689]{1})(\\d{7})$/,\n  SV: /^(\\+?503)?([67]{1})(\\d{7})$/,\n  PR: /^(\\+?1)?([0]{1}[78]{1}|[2367]{1})(\\d{7})$/,\n  JM: /^(\\+?1)?([8]{1}[79]{1}|[45]{1}[67]{1})(\\d{7})$/,\n  BB: /^(\\+?1)?([246]{1})(\\d{7})$/,\n  KY: /^(\\+?1)?([345]{1}([01]{1}|[69]{1})|[24]{1}([26]{1}|[46]{1})|[78]{1}([4]{1}|[5]{1}|[7]{1}|[9]{1}))(\\d{6})$/,\n  VG: /^(\\+?1)?([284]{1})(\\d{7})$/,\n  TT: /^(\\+?1)?([868]{1})(\\d{7})$/,\n  DM: /^(\\+?1)?([767]{1})(\\d{7})$/,\n  GD: /^(\\+?1)?([473]{1})(\\d{7})$/,\n  GH: /^(\\+?233|0)?([23]0|[57][0567]|6[679]|8[124567])(\\d{7})$/,\n  KE: /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/,\n  NG: /^(\\+?234|0)?[789]\\d{9}$/,\n  UG: /^(\\+?256|0)?([39]0|[47][057]|[568][056]|[7-9][089])(\\d{7})$/,\n  RW: /^(\\+?250|0)?[7]\\d{8}$/,\n  CM: /^(\\+?237|0)?(6[57]|2[2368]|3[89]|4[6-8]|[78]0|\\d{2})(\\d{6,7})$/,\n  SN: /^(\\+?221|0)?[76][05](\\d{7}|\\d{8})$/,\n  TZ: /^(\\+?255|0)?[67]\\d{8}$/,\n  CI: /^(\\+?225|0)?[017]\\d{7}$/,\n  MG: /^(\\+?261|0)?[2368]\\d{7}$/,\n  ZM: /^(\\+?26[01]|0)?[567]\\d{8}$/,\n  ZW: /^(\\+?263|0)?[17]\\d{8}$/,\n  MW: /^(\\+?265|0)?[11768]\\d{7}$/,\n  LS: /^(\\+?266|0)?[5-8]\\d{7}$/,\n  SZ: /^(\\+?268|0)?[7]\\d{7}$/,\n  KM: /^(\\+?269|0)?[269]\\d{7}$/,\n  DJ: /^(\\+?253|0)?[77-9](\\d{6})$/,\n  RE: /^(\\+?262|0)?[269]\\d{8}$/,\n  YT: /^(\\+?262|0)?[639]\\d{8}$/,\n  WF: /^(\\+?681|0)?\\d{6}$/,\n  NU: /^(\\+?683|0)?\\d{4}$/,\n  TK: /^(\\+?690|0)?\\d{4}$/,\n  FM: /^(\\+?691|0)?[1-9]\\d{3}$/,\n  MH: /^(\\+?692|0)?\\d{7}$/,\n  SA: /^(\\+?966|0)?5[0-9]{8}$/,\n  RU: /^(\\+?7|8)?9\\d{9}$/,\n};\n\nclass ValidateForm extends React.Component<Props> {\n  componentDidMount() {\n    this.init();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.rules !== prevProps.rules) {\n      this.init();\n    }\n  }\n\n  init() {\n    let { rules, onSubmit, errorElement } = this.props;\n    let wrapper = document.getElementById(\"_validation_wrapper\");\n    let form = wrapper?.children[0] as HTMLFormElement;\n    let submit_button =\n      (form.querySelector('button[type=\"submit\"]') as HTMLFormElement) ||\n      (form.querySelector('input[type=\"submit\"]') as HTMLFormElement);\n    let errorText = document.querySelector(errorElement!) as HTMLElement;\n    let errorMessage = String;\n    let isInputRedBorder = false;\n\n    form.querySelectorAll(\"input\").forEach((input, index) => {\n      if (input.style.transition === \"\") {\n        input.style.transition = \"0.3s ease\";\n        input.style.transitionDelay = \"0.\" + (index - 1) + \"s\";\n      }\n    });\n\n    if (submit_button) {\n      form.addEventListener(\"submit\", (e) => {\n        e.preventDefault();\n\n        if (errorText.innerHTML === \"\" && !isInputRedBorder) {\n          if (onSubmit) {\n            onSubmit(e);\n          } else {\n            form.submit();\n          }\n        }\n      });\n    }\n\n    const setErrorText = (message: string) => {\n      if (errorText) {\n        errorText.innerText = message;\n      }\n    };\n\n    const runValidateRequired = () => {\n      // Check If All Required Feilds Filled\n\n      form.addEventListener(\"input\", (event) => {\n        const input = event.target as HTMLInputElement;\n\n        input.style.borderColor = \"\";\n        isInputRedBorder = false;\n      });\n\n      const submit_button =\n        form?.querySelector<HTMLInputElement>('button[type=\"submit\"]') ||\n        form?.querySelector<HTMLInputElement>('input[type=\"submit\"]');\n\n      submit_button?.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n\n        let requiredInputs: HTMLInputElement[] = [];\n\n        if (rules?.validateRequired?.applyOnly) {\n          rules?.validateRequired?.applyOnly.forEach((inputName: String) => {\n            requiredInputs.push(\n              form?.querySelector<HTMLInputElement>(\n                `[name=\"${inputName}\"]`\n              ) as HTMLInputElement\n            );\n          });\n        } else {\n          form\n            ?.querySelectorAll<HTMLInputElement>(\"input[required]\")\n            .forEach((input) => {\n              requiredInputs.push(input);\n            });\n        }\n\n        const missingInputs: HTMLInputElement[] = [];\n\n        requiredInputs?.forEach((input) => {\n          if (!input.value) {\n            missingInputs.push(input);\n          }\n        });\n\n        if (missingInputs.length > 0) {\n          missingInputs.forEach((input, index) => {\n            if (rules?.validateRequired?.notvalidated) {\n              rules?.validateRequired?.notvalidated(missingInputs);\n            }\n            if (index === 0) {\n              input.focus();\n            }\n            if (rules?.validateRequired?.action === \"input_red_border\") {\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n                isInputRedBorder = true;\n              } else {\n                input.style.border = \"1px solid red\";\n                isInputRedBorder = true;\n              }\n            } else if (\n              rules?.validateRequired?.action === \"show_error_message\"\n            ) {\n              if (rules?.validateRequired.message) {\n                setErrorText(rules?.validateRequired.message);\n              }\n            } else if (rules?.validateRequired?.action === \"both\") {\n              if (rules?.validateRequired?.message) {\n                setErrorText(rules?.validateRequired?.message);\n              }\n              if (input.style.border) {\n                input.style.borderColor = \"red\";\n                isInputRedBorder = true;\n              } else {\n                input.style.border = \"1px solid red\";\n                isInputRedBorder = true;\n              }\n            }\n          });\n        } else {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (rules?.validateRequired?.onsuccess) {\n            rules?.validateRequired?.onsuccess();\n          }\n        }\n      });\n    };\n\n    const runValidateMinMax = () => {\n      const inputs = form.querySelectorAll(\"input[min][max]\");\n\n      if (rules?.ValidateMinMax?.when === \"typing\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"input\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!!);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      } else if (rules?.ValidateMinMax?.when === \"onblur\") {\n        inputs.forEach((input) => {\n          input.addEventListener(\"blur\", (event) => {\n            const input = event.target as HTMLInputElement;\n            const min = input.min;\n            const max = input.max;\n            const value = input.value;\n            const type = input.type;\n            const inputMinMessage = input.getAttribute(\"data-min-message\");\n            const inputMaxMessage = input.getAttribute(\"data-max-message\");\n\n            if (min && max) {\n              if (type === \"number\") {\n                if (value < min) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value > max) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              } else if (type === \"text\") {\n                if (value.length < Number(min)) {\n                  if (rules?.ValidateMinMax?.exceedsMin) {\n                    rules?.ValidateMinMax?.exceedsMin(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMinMessage) {\n                    setErrorText(inputMinMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.min!);\n                    }\n                  }\n                } else if (value.length > Number(max)) {\n                  if (rules?.ValidateMinMax?.exceedsMax) {\n                    rules?.ValidateMinMax?.exceedsMax(input);\n                  }\n                  if (input.style.border) {\n                    input.style.borderColor = \"red\";\n                    isInputRedBorder = true;\n                  } else {\n                    input.style.border = \"1px solid red\";\n                    isInputRedBorder = true;\n                  }\n                  if (inputMaxMessage) {\n                    setErrorText(inputMaxMessage);\n                  } else {\n                    if (rules?.ValidateMinMax?.message) {\n                      setErrorText(rules?.ValidateMinMax?.message.max!);\n                    }\n                  }\n                } else {\n                  if (errorText) {\n                    errorText.innerText = \"\";\n                  }\n                  input.style.borderColor = \"\";\n                  isInputRedBorder = false;\n                  if (rules?.ValidateMinMax?.onsuccess) {\n                    rules?.ValidateMinMax?.onsuccess(input);\n                  }\n                }\n              }\n            }\n          });\n        });\n      }\n    };\n\n    const runValidateEmail = () => {\n      let emailPattern: RegExp;\n      let type = rules?.ValidateEmail?.type;\n      let emailInput = form.querySelector(\n        `input[name=\"${rules?.ValidateEmail?.emailInput}\"]`\n      ) as HTMLInputElement;\n      let message = rules?.ValidateEmail?.message;\n      let onsuccess = rules?.ValidateEmail?.onsuccess;\n      let invalid = rules?.ValidateEmail?.invalid;\n      let when = rules?.ValidateEmail?.when || \"typing\";\n\n      switch (type) {\n        case \"personal\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"business\":\n          emailPattern =\n            /^(?!.*@(?:gmail|yahoo|hotmail|outlook)\\.com$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/i;\n          break;\n        case \"yahoo\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@yahoo\\.com$/;\n          break;\n        case \"gmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@gmail\\.com$/;\n          break;\n        case \"hotmail\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@(hotmail|outlook)\\.com$/;\n          break;\n        case \"aol\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@aol\\.com$/;\n          break;\n        case \"isp\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(comcast|verizon|att)\\.com$/;\n          break;\n        case \"education\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(edu)$/;\n          break;\n        case \"government\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(gov)$/;\n          break;\n        case \"nonprofit\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(org)$/;\n          break;\n        case \"international\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}\\.[a-zA-Z]{2}$/;\n          break;\n        case \"domain-specific\":\n          emailPattern =\n            /^[a-zA-Z0-9._%+-]+@(support|sales|info)\\.[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        case \"alias\":\n          emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n          break;\n        default:\n          return false;\n      }\n\n      if (when === \"onblur\") {\n        emailInput.addEventListener(\"blur\", () => {\n          let email = emailInput.value;\n\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              emailInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              emailInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        emailInput.addEventListener(\"input\", () => {\n          let email = emailInput.value;\n          if (emailPattern.test(email)) {\n            if (onsuccess) {\n              onsuccess(emailInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              emailInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (emailInput.style.border) {\n              emailInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              emailInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePattern = () => {\n      let inputElement = form.querySelector(\n        `input[name=\"${rules?.ValidatePattern?.input}\"]`\n      ) as HTMLInputElement;\n      let options = rules?.ValidatePattern;\n\n      if (options?.when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      } else if (options?.when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let input = inputElement.value;\n\n          if (options?.allowEmpty && input.length === 0) {\n            return true;\n          }\n\n          let regex: RegExp;\n\n          switch (options?.type) {\n            case \"regex\":\n              regex = new RegExp(options?.pattern, options?.modifiers);\n              break;\n            case \"wildcard\":\n              regex = new RegExp(\n                \"^\" +\n                  options?.pattern\n                    .replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\")\n                    .replace(/\\\\\\*/g, \".*\")\n                    .replace(/\\\\\\?/g, \".\") +\n                  \"$\",\n                options?.modifiers\n              );\n              break;\n            default:\n              throw new Error(\"Invalid validation type\");\n          }\n\n          const isValid = regex.test(input);\n\n          if (isValid) {\n            if (options?.onsuccess) {\n              options?.onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (options?.invalid) {\n              options?.invalid();\n            }\n            if (errorText) {\n              if (options?.errorMessage) {\n                errorText.innerText = options?.errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidatePhone = () => {\n      let phoneInput = form.querySelector(\n        `input[name=\"${rules?.ValidatePhone?.phoneInput}\"]`\n      ) as HTMLInputElement;\n      let countryCode = rules?.ValidatePhone?.countryCode;\n      let when = rules?.ValidatePhone?.when;\n      let onsuccess = rules?.ValidatePhone?.onsuccess;\n      let invalid = rules?.ValidatePhone?.invalid;\n      let message = rules?.ValidatePhone?.message;\n\n      const mobileRegex =\n        /^(\\+?254|0)?([17](0|1|[3-9])[0-9]{6}|([2-9]|[4-6][0-9])[0-9]{6,7})$/;\n      const landlineRegex = /^(\\+?254|0)?([2-69][0-9]{6,7})$/;\n\n      if (when === \"onblur\") {\n        phoneInput.addEventListener(\"blur\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              phoneInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"red\";\n              isInputRedBorder = true;\n            } else {\n              phoneInput.style.border = \"1px solid red\";\n              isInputRedBorder = true;\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules?.ValidatePhone?.isLandlineNumber) {\n            rules?.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules?.ValidatePhone?.isMobileNumber) {\n            rules?.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      } else if (when === \"typing\") {\n        phoneInput.addEventListener(\"input\", () => {\n          let phoneNumber = phoneInput.value;\n\n          let isValid = false;\n\n          if (countryCode && countryCodeRegexMap[countryCode]) {\n            isValid = countryCodeRegexMap[countryCode].test(phoneNumber);\n          } else {\n            for (const regex of Object.values(countryCodeRegexMap)) {\n              if (regex.test(phoneNumber)) {\n                isValid = true;\n                break;\n              }\n            }\n          }\n\n          if (isValid) {\n            if (onsuccess) {\n              onsuccess(phoneInput);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (phoneInput.style.border) {\n              phoneInput.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              phoneInput.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (message) {\n                errorText.innerText = message;\n              }\n            }\n          }\n\n          if (rules?.ValidatePhone?.isLandlineNumber) {\n            rules?.ValidatePhone.isLandlineNumber(\n              landlineRegex.test(phoneNumber)\n            );\n          }\n          if (rules?.ValidatePhone?.isMobileNumber) {\n            rules?.ValidatePhone.isMobileNumber(mobileRegex.test(phoneNumber));\n          }\n        });\n      }\n    };\n\n    const runValidateNumber = () => {\n      let min = rules?.ValidateNumber?.min;\n      let max = rules?.ValidateNumber?.max;\n      let inputName = rules?.ValidateNumber?.input;\n      let when = rules?.ValidateNumber?.when;\n      let decimalPlaces = rules?.ValidateNumber?.decimalPlaces;\n      let allowNegative = rules?.ValidateNumber?.allowNegative;\n      let integersOnly = rules?.ValidateNumber?.integersOnly;\n      let base = rules?.ValidateNumber?.base;\n      let customErrorMessages = rules?.ValidateNumber?.customErrorMessages;\n      let inputElement = form.querySelector(\n        `input[name='${inputName}']`\n      ) as HTMLInputElement;\n      let errorMessage: string | undefined;\n      let onsuccess = rules?.ValidateNumber?.onsuccess;\n      let invalid = rules?.ValidateNumber?.invalid;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          errorMessage = undefined;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage === undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          errorMessage = undefined;\n\n          let input = inputElement.value;\n          let num = Number(input);\n\n          // If the input is not a valid number, return an error message\n          if (isNaN(num)) {\n            return {\n              isValid: false,\n              errorMessage:\n                customErrorMessages?.invalidNumber || \"Invalid number\",\n            };\n          }\n\n          // Check if the number is within the specified range\n          if (\n            (min !== undefined && num < min) ||\n            (max !== undefined && num > max)\n          ) {\n            errorMessage =\n              customErrorMessages?.range ||\n              `Number must be between ${min} and ${max}`;\n          }\n\n          // Check if the number has the specified number of decimal places\n          if (decimalPlaces !== undefined) {\n            const numStr = num.toString();\n            const decimalIndex = numStr.indexOf(\".\");\n            const numDecimalPlaces =\n              decimalIndex !== -1 ? numStr.length - decimalIndex - 1 : 0;\n            if (numDecimalPlaces > decimalPlaces) {\n              errorMessage =\n                customErrorMessages?.decimalPlaces ||\n                `Number must have no more than ${decimalPlaces} decimal places`;\n            }\n          }\n\n          // Check if the number is negative (if negative numbers are not allowed)\n          if (!allowNegative && num < 0) {\n            errorMessage =\n              customErrorMessages?.negative ||\n              \"Negative numbers are not allowed\";\n          }\n\n          // Check if the number is not an integer (if integers only are required)\n          if (integersOnly && !Number.isInteger(num)) {\n            errorMessage =\n              customErrorMessages?.integersOnly || \"Only integers are allowed\";\n          }\n\n          // Check if the number is in the specified base (if a base is specified)\n          if (base !== undefined) {\n            const parsedNum = parseInt(input as string, base);\n            if (isNaN(parsedNum)) {\n              errorMessage =\n                customErrorMessages?.base || `Number must be in base ${base}`;\n            }\n          }\n\n          // If no error message was set, the validation passed\n\n          if (errorMessage == undefined) {\n            if (onsuccess) {\n              onsuccess(inputElement);\n            }\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              inputElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n          } else {\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateInteger = () => {\n      let when = rules?.ValidateInteger?.when;\n      let input = rules?.ValidateInteger?.input;\n      let minValue = rules?.ValidateInteger?.minValue;\n      let maxValue = rules?.ValidateInteger?.maxValue;\n      let uniqueValues = rules?.ValidateInteger?.uniqueValues;\n      let positiveOnly = rules?.ValidateInteger?.positiveOnly;\n      let evenOnly = rules?.ValidateInteger?.evenOnly;\n      let divisibleBy = rules?.ValidateInteger?.divisibleBy;\n      let invalid = rules?.ValidateInteger?.invalid;\n      let customErrorMessages = rules?.ValidateInteger?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const errorMessage = {\n            ...customErrorMessages,\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = Number(inputElement.value);\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const errorMessage = {\n            ...customErrorMessages,\n            notANumber: \"The value must be a number\",\n            notAnInteger: \"The value must be an integer\",\n            outOfRange: `The value must be between ${minValue} and ${maxValue}`,\n            notUnique: \"The value must be unique\",\n            notPositive: \"The value must be positive\",\n            notEven: \"The value must be even\",\n            notDivisible: `The value must be divisible by ${divisibleBy}`,\n          };\n\n          // Check that the input value is actually a number\n          if (typeof value !== \"number\" || isNaN(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notANumber;\n              }\n            }\n          }\n\n          // Check that the input value is an integer\n          if (!Number.isInteger(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notAnInteger;\n              }\n            }\n          }\n\n          // Check that the input value is within the specified range (if provided)\n          if (\n            (minValue !== undefined && value < minValue) ||\n            (maxValue !== undefined && value > maxValue)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.outOfRange;\n              }\n            }\n          }\n\n          // Check that the input value is unique (if required)\n          if (uniqueValues !== undefined && uniqueValues.includes(value)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notUnique;\n              }\n            }\n          }\n\n          // Check that the input value is positive (if required)\n          if (positiveOnly !== undefined && positiveOnly && value <= 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notPositive;\n              }\n            }\n          }\n\n          // Check that the input value is even (if required)\n          if (evenOnly !== undefined && evenOnly && value % 2 !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notEven;\n              }\n            }\n          }\n\n          // Check that the input value is divisible by a certain number (if required)\n          if (divisibleBy !== undefined && value % divisibleBy !== 0) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (invalid) {\n              invalid();\n            }\n            if (errorText) {\n              if (errorMessage) {\n                errorText.innerText = errorMessage.notDivisible;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateFloat = () => {\n      let when = rules?.ValidateFloat?.when;\n      let input = rules?.ValidateFloat?.input;\n      let customErrorMessages = rules?.ValidateFloat?.customErrorMessages;\n\n      let inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        required: \"This field is required\",\n        invalid: \"Please enter a valid number\",\n        min: `Please enter a number greater than or equal to ${rules?.ValidateFloat?.min}`,\n        max: `Please enter a number less than or equal to ${rules?.ValidateFloat?.max}`,\n        precision: `Please enter a number with at most ${rules?.ValidateFloat?.precision} decimal places`,\n        ...customErrorMessages,\n      };\n      const errorMessages = defaultErrorMessages;\n\n      if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let value = inputElement.value;\n\n          const isEmpty = !value.trim();\n          if (rules?.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.min !== undefined &&\n            numberValue < rules?.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.max !== undefined &&\n            numberValue > rules?.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules?.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules?.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          let value = inputElement.value;\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          const isEmpty = !value.trim();\n          if (rules?.ValidateFloat?.required && isEmpty) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.required!;\n              }\n            }\n          }\n\n          const numberValue = parseFloat(value);\n          if (isNaN(numberValue) || !isFinite(numberValue)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalid!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.min !== undefined &&\n            numberValue < rules?.ValidateFloat.min\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.min!;\n              }\n            }\n          }\n\n          if (\n            rules?.ValidateFloat?.max !== undefined &&\n            numberValue > rules?.ValidateFloat.max\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.max!;\n              }\n            }\n          }\n\n          if (rules?.ValidateFloat?.precision !== undefined) {\n            const parts = value.split(\".\");\n            if (\n              parts.length === 2 &&\n              parts[1].length > rules?.ValidateFloat.precision\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.precision!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateDate = () => {\n      let when = rules?.ValidateDate?.when;\n      let inputValue = rules?.ValidateDate?.input;\n      let minDate = rules?.ValidateDate?.minDate;\n      let maxDate = rules?.ValidateDate?.maxDate;\n      let allowOnlyBusinessDay = rules?.ValidateDate?.allowOnlyBusinessDay;\n      let allowOnlyWeekend = rules?.ValidateDate?.allowOnlyWeekend;\n      let customFormat = rules?.ValidateDate?.customFormat;\n      let timeZone = rules?.ValidateDate?.timeZone;\n      let customErrorMessages = rules?.ValidateDate?.customErrorMessages;\n      let inputElement = form.querySelector(\n        `input[name=\"${inputValue}\"]`\n      ) as HTMLInputElement;\n\n      function isBusinessDayCheck(date: Date): boolean {\n        // assuming weekends are Saturday (6) and Sunday (0)\n        const dayOfWeek = date.getDay();\n        return dayOfWeek !== 0 && dayOfWeek !== 6;\n      }\n\n      function isWeekendCheck(date: Date): boolean {\n        const dayOfWeek = date.getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6;\n      }\n\n      const defaultErrorMessages = {\n        invalidDate: \"Invalid date format\",\n        minDate: `The date must be on or after ${rules?.ValidateDate?.minDate?.toLocaleDateString()}`,\n        maxDate: `The date must be on or before ${rules?.ValidateDate?.maxDate?.toLocaleDateString()}`,\n        businessDay: \"Date is not a business day\",\n        notWeekend: \"Date is not a weekend\",\n        invalidFormat: \"Date is not in the expected format\",\n        invalidTimeZone: \"Time zone is not valid\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let input = inputElement.value;\n          const inputDate = new Date(input);\n\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate!;\n              }\n            }\n          }\n\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate!;\n              }\n            }\n          }\n\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate!;\n              }\n            }\n          }\n\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay!;\n              }\n            }\n          }\n\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend!;\n              }\n            }\n          }\n\n          if (timeZone) {\n            try {\n              const formatter = new Intl.DateTimeFormat(\"en-US\", {\n                timeZone,\n                ...(customFormat && { dateStyle: \"short\", timeStyle: \"short\" }),\n              });\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let input = inputElement.value;\n          const inputDate = new Date(input);\n\n          if (isNaN(inputDate.getTime())) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidDate!;\n              }\n            }\n          }\n\n          if (minDate && inputDate < minDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.minDate!;\n              }\n            }\n          }\n\n          if (maxDate && inputDate > maxDate) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.maxDate!;\n              }\n            }\n          }\n\n          if (allowOnlyBusinessDay && !isBusinessDayCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.businessDay!;\n              }\n            }\n          }\n\n          if (allowOnlyWeekend && !isWeekendCheck(inputDate)) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.notWeekend!;\n              }\n            }\n          }\n\n          if (timeZone) {\n            try {\n              const formatter = new Intl.DateTimeFormat(\"en-US\", {\n                timeZone,\n                ...(customFormat && { dateStyle: \"short\", timeStyle: \"short\" }),\n              });\n              formatter.format(inputDate);\n            } catch (error) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidTimeZone!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateTime = () => {\n      const when = rules?.ValidateTime?.when;\n      const input = rules?.ValidateTime?.input;\n      const customErrorMessages = rules?.ValidateTime?.customErrorMessages;\n      const timeRange = rules?.ValidateTime?.timeRange;\n      const timeInterval = rules?.ValidateTime?.timeInterval;\n      const timezone = rules?.ValidateTime?.timezone;\n\n      const defaultErrorMessages = {\n        invalidFormat: \"Invalid time format\",\n        invalidRange: \"Time is out of range\",\n        invalidTimezone: \"Invalid timezone\",\n        invalidInterval: \"Time is not within the specified interval\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      const inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let timeString = inputElement.value;\n\n          // Helper function to pad a number with leading zeros\n          function pad(num: number): string {\n            const str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n\n          // Check for valid time format\n          if (\n            !timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat!;\n              }\n            }\n          }\n\n          // Check for valid time range\n          const timeParts = timeString\n            .split(\":\")\n            .map((part) => parseInt(part, 10));\n          const hours = timeParts[0];\n          const minutes = timeParts[1];\n          const seconds = timeParts[2] || 0;\n          if (\n            hours < 0 ||\n            hours > 23 ||\n            minutes < 0 ||\n            minutes > 59 ||\n            seconds < 0 ||\n            seconds > 59\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange!;\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            const startTime = new Date(`2022-01-01T${timeRange.startTime}`);\n            const endTime = new Date(`2022-01-01T${timeRange.endTime}`);\n            const time = new Date(`2022-01-01T${timeString}`);\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText =\n                    \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            const timeParts = timeString\n              .split(\":\")\n              .map((part) => parseInt(part, 10));\n            const totalMinutes = timeParts[0] * 60 + timeParts[1];\n            if (\n              totalMinutes < timeInterval.startInterval! ||\n              totalMinutes > timeInterval.endInterval!\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          let timeString = inputElement.value;\n\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          // Helper function to pad a number with leading zeros\n          function pad(num: number): string {\n            const str = num.toString();\n            return str.length === 1 ? \"0\" + str : str;\n          }\n\n          // Check for valid time format\n          if (\n            !timeString.match(/^([0-1][0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?$/)\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidFormat!;\n              }\n            }\n          }\n\n          // Check for valid time range\n          const timeParts = timeString\n            .split(\":\")\n            .map((part) => parseInt(part, 10));\n          const hours = timeParts[0];\n          const minutes = timeParts[1];\n          const seconds = timeParts[2] || 0;\n          if (\n            hours < 0 ||\n            hours > 23 ||\n            minutes < 0 ||\n            minutes > 59 ||\n            seconds < 0 ||\n            seconds > 59\n          ) {\n            if (inputElement.style.border) {\n              inputElement.style.borderColor = \"red\";\n            } else {\n              inputElement.style.border = \"1px solid red\";\n            }\n            if (errorText) {\n              if (errorMessages) {\n                errorText.innerText = errorMessages.invalidRange!;\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified time range\n          if (timeRange !== undefined) {\n            const startTime = new Date(`2022-01-01T${timeRange.startTime}`);\n            const endTime = new Date(`2022-01-01T${timeRange.endTime}`);\n            const time = new Date(`2022-01-01T${timeString}`);\n            if (time < startTime || time > endTime) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText =\n                    \"Time is outside of the specified range!\";\n                }\n              }\n            }\n          }\n\n          // Check if the time string falls within a specified interval\n          if (timeInterval !== undefined) {\n            const timeParts = timeString\n              .split(\":\")\n              .map((part) => parseInt(part, 10));\n            const totalMinutes = timeParts[0] * 60 + timeParts[1];\n            if (\n              totalMinutes < timeInterval.startInterval! ||\n              totalMinutes > timeInterval.endInterval!\n            ) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidInterval;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateUrl = () => {\n      const when = rules?.ValidateUrl?.when;\n      const input = rules?.ValidateUrl?.input;\n      const customErrorMessages = rules?.ValidateUrl?.CustomErrorMessages;\n      const checkUrl = rules?.ValidateUrl?.checkUrl;\n      const checkProtocol = rules?.ValidateUrl?.checkProtocol;\n      const checkDomain = rules?.ValidateUrl?.checkDomain;\n      const checkIpAddress = rules?.ValidateUrl?.checkIpAddress;\n      const checkInAccessibleUrl = rules?.ValidateUrl?.checkAccessibleUrl;\n      const checkCharacters = rules?.ValidateUrl?.checkCharacters;\n      const protocols = rules?.ValidateUrl?.protocols;\n\n      const inputElement = form.querySelector(\n        `input[name=\"${input}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        invalidUrl: \"The URL is not well-formed\",\n        invalidProtocol: \"The URL has an invalid protocol\",\n        invalidDomain: \"The URL has an invalid domain name\",\n        invalidIpAddress: \"The URL has an invalid IP address\",\n        inaccessibleUrl: \"The URL is inaccessible\",\n        invalidCharacters: \"The URL contains invalid characters\",\n        protocolNotAllowed: `The URL must use the ${protocols} protocol`,\n      };\n      const errorMessages = { ...customErrorMessages, ...defaultErrorMessages };\n\n      if (when === \"typing\") {\n        inputElement.addEventListener(\"input\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let url = inputElement.value;\n\n          const urlRegex =\n            /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          try {\n            const parsedUrl = new URL(url);\n\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed!;\n                  }\n                }\n              }\n            }\n\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol!;\n                  }\n                }\n              }\n            }\n\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain!;\n                  }\n                }\n              }\n            }\n\n            if (checkIpAddress) {\n              if (\n                parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)\n              ) {\n                const octets = parsedUrl.hostname.split(\".\");\n                if (octets.some((octet) => parseInt(octet) > 255)) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress!;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (checkInAccessibleUrl) {\n              fetch(url).then((response) => {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl!;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters!;\n                }\n              }\n            }\n          }\n        });\n      } else if (when === \"onblur\") {\n        inputElement.addEventListener(\"blur\", () => {\n          if (errorText) {\n            errorText.innerText = \"\";\n          }\n          if (inputElement.style.border) {\n            inputElement.style.borderColor = \"\";\n            isInputRedBorder = false;\n          } else {\n            inputElement.style.border = \"\";\n            isInputRedBorder = false;\n          }\n\n          let url = inputElement.value;\n\n          const urlRegex =\n            /^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?::\\d{1,5})?(?:\\/\\S*)?$/;\n\n          if (checkUrl) {\n            if (!urlRegex.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          try {\n            const parsedUrl = new URL(url);\n\n            if (protocols) {\n              if (!protocols.includes(parsedUrl.protocol.replace(\":\", \"\"))) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.protocolNotAllowed!;\n                  }\n                }\n              }\n            }\n\n            if (checkProtocol) {\n              if (![\"http:\", \"https:\", \"ftp:\"].includes(parsedUrl.protocol)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidProtocol!;\n                  }\n                }\n              }\n            }\n\n            if (checkDomain) {\n              if (!/^[a-zA-Z0-9-]+\\.[a-zA-Z]{2,}$/.test(parsedUrl.hostname)) {\n                if (inputElement.style.border) {\n                  inputElement.style.borderColor = \"red\";\n                } else {\n                  inputElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  if (errorMessages) {\n                    errorText.innerText = errorMessages.invalidDomain!;\n                  }\n                }\n              }\n            }\n\n            if (checkIpAddress) {\n              if (\n                parsedUrl.hostname.match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)\n              ) {\n                const octets = parsedUrl.hostname.split(\".\");\n                if (octets.some((octet) => parseInt(octet) > 255)) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.invalidIpAddress!;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (checkInAccessibleUrl) {\n              fetch(url).then((response) => {\n                if (!response.ok) {\n                  if (inputElement.style.border) {\n                    inputElement.style.borderColor = \"red\";\n                  } else {\n                    inputElement.style.border = \"1px solid red\";\n                  }\n                  if (errorText) {\n                    if (errorMessages) {\n                      errorText.innerText = errorMessages.inaccessibleUrl!;\n                    }\n                  }\n                }\n              });\n            }\n          } catch (err) {\n            if (checkUrl) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidUrl!;\n                }\n              }\n            }\n          }\n\n          if (checkCharacters) {\n            if (/[ <>]/.test(url)) {\n              if (inputElement.style.border) {\n                inputElement.style.borderColor = \"red\";\n              } else {\n                inputElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                if (errorMessages) {\n                  errorText.innerText = errorMessages.invalidCharacters!;\n                }\n              }\n            }\n          }\n        });\n      }\n    };\n\n    const runValidateCreditCard = () => {\n      const when = rules?.ValidateCreditCard?.when;\n      const allowedCards = rules?.ValidateCreditCard?.allowedCards;\n      const cardNumberValue = rules?.ValidateCreditCard?.cardNumber;\n      const expirationDateValue = rules?.ValidateCreditCard?.expirationDate;\n      const cvvValue = rules?.ValidateCreditCard?.cvv;\n      const billingZipValue = rules?.ValidateCreditCard?.billingZip;\n      const customErrorMessages =\n        rules?.ValidateCreditCard?.customErrorMessages;\n      const getCardType = rules?.ValidateCreditCard?.getCardType;\n\n      let cardNumberElement = form.querySelector(\n        `input[name=\"${cardNumberValue}\"]`\n      ) as HTMLInputElement;\n      let expirationDateElement = form.querySelector(\n        `input[name=\"${expirationDateValue}\"]`\n      ) as HTMLInputElement;\n      let cvvElement = form.querySelector(\n        `input[name=\"${cvvValue}\"]`\n      ) as HTMLInputElement;\n      let billingZipElement = form.querySelector(\n        `input[name=\"${billingZipValue}\"]`\n      ) as HTMLInputElement;\n\n      const defaultErrorMessages = {\n        invalidCardNumber: \"Invalid credit card number\",\n        onlyAllowedCards: `Only ${allowedCards}  are allowed`,\n        invalidExpirationDate: \"Invalid expiration date\",\n        invalidCVV: \"Invalid CVV code\",\n        invalidBillingZip: \"Invalid billing zip code\",\n      };\n\n      const errorMessages = {\n        ...customErrorMessages,\n        ...defaultErrorMessages,\n      };\n\n      function GetCardType(cardNumber: string): string {\n        // This function determines the card type based on the first digits of the card number\n        // You can implement your own logic to determine the card type\n        // Here's an example implementation that supports Visa, Mastercard, American Express, and Discover cards:\n        if (/^4/.test(cardNumber)) {\n          return \"Visa\";\n        } else if (/^5[1-5]/.test(cardNumber)) {\n          return \"Mastercard\";\n        } else if (/^3[47]/.test(cardNumber)) {\n          return \"American Express\";\n        } else if (/^6(?:011|5)/.test(cardNumber)) {\n          return \"Discover\";\n        } else {\n          return \"Unknown\";\n        }\n      }\n\n      function isValidCreditCardNumber(cardNumber: string): boolean {\n        // This function uses the Luhn algorithm to validate the credit card number\n        // You can find more information about the algorithm here: https://en.wikipedia.org/wiki/Luhn_algorithm\n        const strippedCardNumber = cardNumber.replace(/\\D/g, \"\");\n        let sum = 0;\n        let shouldDouble = false;\n        for (let i = strippedCardNumber.length - 1; i >= 0; i--) {\n          let digit = parseInt(strippedCardNumber.charAt(i), 10);\n          if (shouldDouble) {\n            if ((digit *= 2) > 9) digit -= 9;\n          }\n          sum += digit;\n          shouldDouble = !shouldDouble;\n        }\n        return sum % 10 === 0 && sum > 0;\n      }\n\n      function isValidCreditCardExpirationDate(\n        expirationDate: string\n      ): boolean {\n        // This function validates the expiration date of the credit card\n        // The expiration date should be in the format \"MM/YY\"\n        const currentDate = new Date();\n        const currentYear = currentDate.getFullYear();\n        const currentMonth = currentDate.getMonth() + 1;\n\n        const [expirationMonth, expirationYear] = expirationDate.split(\"/\");\n        const expMonth = parseInt(expirationMonth, 10);\n        const expYear = parseInt(expirationYear, 10) + 2000;\n\n        // Check that the expiration date is in the future\n        if (\n          expYear > currentYear ||\n          (expYear === currentYear && expMonth >= currentMonth)\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function isValidCreditCardCVV(cvv: string): boolean {\n        // This function validates the CVV code of the credit card\n        // You can implement your own validation logic based on your requirements\n        const strippedCVV = cvv.replace(/\\D/g, \"\");\n        return /^[0-9]{3,4}$/.test(strippedCVV);\n      }\n\n      function isValidCreditCardBillingZip(billingZip: string): boolean {\n        // This function validates the billing zip code of the credit card\n        // You can implement your own validation logic based on your requirements\n        const strippedBillingZip = billingZip.replace(/\\D/g, \"\");\n        return /^[0-9]{5}(?:-[0-9]{4})?$/.test(strippedBillingZip);\n      }\n\n      const checkCardNumber = (cardNumber: string) => {\n        // Validate the credit card number\n        const isValidCardNumber = isValidCreditCardNumber(cardNumber);\n        if (!isValidCardNumber) {\n          const errorMessage = errorMessages.invalidCardNumber;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkCardType = (cardNumber: string) => {\n        const cardType = GetCardType(cardNumber);\n        // Check if the card type is allowed\n        if (allowedCards) {\n          if (allowedCards.length > 0 && !allowedCards.includes(cardType)) {\n            const errorMessage = errorMessages.onlyAllowedCards;\n            return errorMessage;\n          } else {\n            return \"\";\n          }\n        }\n      };\n\n      const checkExpirationDate = (expirationDate: string) => {\n        // Validate the expiration date\n\n        const isValidExpirationDate =\n          isValidCreditCardExpirationDate(expirationDate);\n        if (!isValidExpirationDate) {\n          const errorMessage = errorMessages.invalidExpirationDate;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkCvv = (cvv: string) => {\n        // Validate the CVV code\n        const isValidCVV = isValidCreditCardCVV(cvv);\n        if (!isValidCVV) {\n          const errorMessage = errorMessages.invalidCVV;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      const checkBillingZip = (billingZip: string) => {\n        // Validate the billing zip code\n        const isValidBillingZip = isValidCreditCardBillingZip(billingZip);\n        if (!isValidBillingZip) {\n          const errorMessage = errorMessages.invalidBillingZip;\n          return errorMessage;\n        } else {\n          return \"\";\n        }\n      };\n\n      if (when === \"typing\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cardNumberElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value)!;\n                }\n              }\n            }\n\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              expirationDateElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n\n        if (cvvElement) {\n          cvvElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cvvElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"input\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              billingZipElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      } else if (when === \"onblur\") {\n        if (cardNumberElement) {\n          cardNumberElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cardNumberElement.style.border) {\n              cardNumberElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cardNumberElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cardNumberElement.value;\n            if (checkCardNumber(value) !== \"\") {\n              if (cardNumberElement.style.border) {\n                cardNumberElement.style.borderColor = \"red\";\n              } else {\n                cardNumberElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCardNumber(value);\n              }\n            }\n\n            if (allowedCards) {\n              if (checkCardType(value) !== \"\") {\n                if (cardNumberElement.style.border) {\n                  cardNumberElement.style.borderColor = \"red\";\n                } else {\n                  cardNumberElement.style.border = \"1px solid red\";\n                }\n                if (errorText) {\n                  errorText.innerText = checkCardType(value)!;\n                }\n              }\n            }\n\n            if (getCardType) {\n              getCardType(GetCardType(value));\n            }\n          });\n        }\n\n        if (expirationDateElement) {\n          expirationDateElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (expirationDateElement.style.border) {\n              expirationDateElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              expirationDateElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = expirationDateElement.value;\n            if (checkExpirationDate(value) !== \"\") {\n              if (expirationDateElement.style.border) {\n                expirationDateElement.style.borderColor = \"red\";\n              } else {\n                expirationDateElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkExpirationDate(value);\n              }\n            }\n          });\n        }\n\n        if (cvvElement) {\n          cvvElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (cvvElement.style.border) {\n              cvvElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              cvvElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = cvvElement.value;\n            if (checkCvv(value) !== \"\") {\n              if (cvvElement.style.border) {\n                cvvElement.style.borderColor = \"red\";\n              } else {\n                cvvElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkCvv(value);\n              }\n            }\n          });\n        }\n\n        if (billingZipElement) {\n          billingZipElement.addEventListener(\"blur\", () => {\n            if (errorText) {\n              errorText.innerText = \"\";\n            }\n            if (billingZipElement.style.border) {\n              billingZipElement.style.borderColor = \"\";\n              isInputRedBorder = false;\n            } else {\n              billingZipElement.style.border = \"\";\n              isInputRedBorder = false;\n            }\n            let value = billingZipElement.value;\n            if (checkBillingZip(value) !== \"\") {\n              if (billingZipElement.style.border) {\n                billingZipElement.style.borderColor = \"red\";\n              } else {\n                billingZipElement.style.border = \"1px solid red\";\n              }\n              if (errorText) {\n                errorText.innerText = checkBillingZip(value);\n              }\n            }\n          });\n        }\n      }\n    };\n\n    if (rules) {\n      if (rules?.validateRequired) {\n        runValidateRequired();\n      } else if (rules?.ValidateMinMax) {\n        runValidateMinMax();\n      } else if (rules?.ValidateEmail) {\n        runValidateEmail();\n      } else if (rules?.ValidatePattern) {\n        runValidatePattern();\n      } else if (rules?.ValidatePhone) {\n        runValidatePhone();\n      } else if (rules?.ValidateNumber) {\n        runValidateNumber();\n      } else if (rules?.ValidateInteger) {\n        runValidateInteger();\n      } else if (rules?.ValidateFloat) {\n        runValidateFloat();\n      } else if (rules?.ValidateDate) {\n        runValidateDate();\n      } else if (rules?.ValidateTime) {\n        runValidateTime();\n      } else if (rules?.ValidateUrl) {\n        runValidateUrl();\n      } else if (rules?.ValidateCreditCard) {\n        runValidateCreditCard();\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"_validation_wrapper\">{this.props.children}</div>;\n  }\n}\n\nexport default ValidateForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}